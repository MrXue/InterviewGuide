(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{447:function(t,a,s){"use strict";s.r(a);var e=s(62),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{align:"center"}},[t._v("C++之其余问题")]),t._v(" "),s("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[s("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),s("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),s("p",[t._v("2、👉23年5月份阿秀从"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),s("div",{attrs:{align:"center"}}),t._v("网站地址："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),s("p"),t._v("3、😊\n    分享一个学弟发给我的"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),s("p"),t._v(" "),s("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),s("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),s("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),s("h2",{attrs:{id:"_21、什么情况会自动生成默认构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、什么情况会自动生成默认构造函数"}},[t._v("#")]),t._v(" 21、什么情况会自动生成默认构造函数？")]),t._v(" "),s("ol",[s("li",[t._v("带有默认构造函数的类成员对象，如果一个类没有任何构造函数，但它含有一个成员对象，而后者有默认构造函数，那么编译器就为该类合成出一个默认构造函数。")])]),t._v(" "),s("p",[t._v("不过这个合成操作只有在构造函数真正被需要的时候才会发生；")]),t._v(" "),s("p",[t._v("如果一个类A含有多个成员类对象的话，那么类A的每一个构造函数必须调用每一个成员对象的默认构造函数而且必须按照类对象在类A中的声明顺序进行；")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("带有默认构造函数的基类，如果一个没有任务构造函数的派生类派生自一个带有默认构造函数基类，那么该派生类会合成一个构造函数调用上一层基类的默认构造函数；")])]),t._v(" "),s("li",[s("p",[t._v("带有一个虚函数的类")])]),t._v(" "),s("li",[s("p",[t._v("带有一个虚基类的类")])]),t._v(" "),s("li",[s("p",[t._v("合成的默认构造函数中，只有基类子对象和成员类对象会被初始化。所有其他的非静态数据成员都不会被初始化。")])])]),t._v(" "),s("p",{attrs:{id:"抽象基类为什么不能创建对象"}}),t._v(" "),s("h2",{attrs:{id:"_22、抽象基类为什么不能创建对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、抽象基类为什么不能创建对象"}},[t._v("#")]),t._v(" 22、抽象基类为什么不能创建对象？")]),t._v(" "),s("p",[t._v("抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。")]),t._v(" "),s("p",[t._v("1、抽象类的定义：\n称带有纯虚函数的类为抽象类。")]),t._v(" "),s("p",[t._v("2、抽象类的作用：\n抽象类的主要作用是将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根，派生类将具体实现在其基类中作为接口的操作。所以派生类实际上刻画了一组子类的操作接口的通用语义，这些语义也传给子类，子类可以具体实现这些语义，也可以再将这些语义传给自己的子类。")]),t._v(" "),s("p",[t._v("3、  抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。")]),t._v(" "),s("p",[t._v("抽象类是不能定义对象的。一个纯虚函数不需要（但是可以）被定义。")]),t._v(" "),s("p",[t._v("4、纯虚函数定义\n纯虚函数是一种特殊的虚函数，它的一般格式如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" 　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("函数名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("参数表"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 　… 　"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("在许多情况下，在基类中不能对虚函数给出有意义的实现，而把它声明为纯虚函数，它的实现留给该基类的派生类去做。这就是纯虚函数的作用。\n　纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。凡是含有纯虚函数的类叫做抽象类。这种类不能声明对象，只是作为基类为派生类服务。除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，不能实例化对象。")]),t._v(" "),s("p",[t._v("5、纯虚函数引入原因\n1、为了方便使用多态特性，我们常常需要在基类中定义虚拟函数。\n2、在很多情况下，基类本身生成对象是不合情理的。例如，动物作为一个基类可以派生出老虎、孔 雀等子类，但动物本身生成对象明显不合常理。\n　为了解决上述问题，引入了纯虚函数的概念，将函数定义为纯虚函数（方法：virtual ReturnType Function()= 0;）。若要使派生类为非抽象类，则编译器要求在派生类中，必须对纯虚函数予以重载以实现多态性。同时含有纯虚函数的类称为抽象类，它不能生成对象。这样就很好地解决了上述两个问题。\n例如，绘画程序中，shape作为一个基类可以派生出圆形、矩形、正方形、梯形等， 如果我要求面积总和的话，那么会可以使用一个 shape * 的数组，只要依次调用派生类的area()函数了。如果不用接口就没法定义成数组，因为既可以是circle ,也可以是square ,而且以后还可能加上rectangle，等等.")]),t._v(" "),s("p",[t._v("6、相似概念\n1、多态性")]),t._v(" "),s("p",[t._v("指相同对象收到不同消息或不同对象收到相同消息时产生不同的实现动作。C++支持两种多态性：编译时多态性，运行时多态性。\n　a.编译时多态性：通过重载函数实现\n　b.运行时多态性：通过虚函数实现。\n2、虚函数\n　虚函数是在基类中被声明为virtual，并在派生类中重新定义的成员函数，可实现成员函数的动态重载。\n3、抽象类\n　包含纯虚函数的类称为抽象类。由于抽象类包含了没有定义的纯虚函数，所以不能定义抽象类的对象。")]),t._v(" "),s("p",{attrs:{id:"模板类和模板函数的区别是什么"}}),t._v(" "),s("h2",{attrs:{id:"_23、模板类和模板函数的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、模板类和模板函数的区别是什么"}},[t._v("#")]),t._v(" 23、模板类和模板函数的区别是什么？")]),t._v(" "),s("p",[t._v("函数模板的实例化是由编译程序在处理函数调用时自动完成的，而类模板的实例化必须由程序员在程序中显式地指")]),t._v(" "),s("p",[t._v("定。即函数模板允许隐式调用和显式调用而类模板只能显示调用。在使用时类模板必须加<T>，而函数模板不必")]),t._v(" "),s("p",{attrs:{id:"多继承的优缺点作为一个开发者怎么看待多继承"}}),t._v(" "),s("h2",{attrs:{id:"_24、多继承的优缺点-作为一个开发者怎么看待多继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、多继承的优缺点-作为一个开发者怎么看待多继承"}},[t._v("#")]),t._v(" 24、多继承的优缺点，作为一个开发者怎么看待多继承")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("C++允许为一个派生类指定多个基类，这样的继承结构被称做多重继承。")])]),t._v(" "),s("li",[s("p",[t._v("多重继承的优点很明显，就是对象可以调用多个基类中的接口；")])]),t._v(" "),s("li",[s("p",[t._v("如果派生类所继承的多个基类有相同的基类，而派生类对象需要调用这个祖先类的接口方法，就会容易出现二义性")])]),t._v(" "),s("li",[s("p",[t._v("加上全局符确定调用哪一份拷贝。比如pa.Author::eat()调用属于Author的拷贝。")])]),t._v(" "),s("li",[s("p",[t._v("使用虚拟继承，使得多重继承类Programmer_Author只拥有Person类的一份拷贝。")])])]),t._v(" "),s("p",{attrs:{id:"模板和实现可不可以不写在一个文件里面为什么"}}),t._v(" "),s("h2",{attrs:{id:"_25、模板和实现可不可以不写在一个文件里面-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、模板和实现可不可以不写在一个文件里面-为什么"}},[t._v("#")]),t._v(" 25、模板和实现可不可以不写在一个文件里面？为什么？")]),t._v(" "),s("p",[t._v("因为在编译时模板并不能生成真正的二进制代码，而是在编译调用模板类或函数的CPP文件时才会去找对应的模板声明和实现，在这种情况下编译器是不知道实现模板类或函数的CPP文件的存在，所以它只能找到模板类或函数的声明而找不到实现，而只好创建一个符号寄希望于链接程序找地址。")]),t._v(" "),s("p",[t._v("但模板类或函数的实现并不能被编译成二进制代码，结果链接程序找不到地址只好报错了。\n《C++编程思想》第15章(第300页)说明了原因：模板定义很特殊。由template<…>处理的任何东西都意味着编译器在当时不为它分配存储空间，")]),t._v(" "),s("p",[t._v("它一直处于等待状态直到被一个模板实例告知。在编译器和连接器的某一处，有一机制能去掉指定模板的多重定义。所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。")]),t._v(" "),s("p",{attrs:{id:"将字符串helloworld从开始到打印到屏幕上的全过程"}}),t._v(" "),s("h2",{attrs:{id:"_26、将字符串-hello-world-从开始到打印到屏幕上的全过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、将字符串-hello-world-从开始到打印到屏幕上的全过程"}},[t._v("#")]),t._v(" 26、将字符串“hello world”从开始到打印到屏幕上的全过程?")]),t._v(" "),s("p",[t._v("1.用户告诉操作系统执行HelloWorld程序（通过键盘输入等）")]),t._v(" "),s("p",[t._v("2．操作系统：找到helloworld程序的相关信息，检查其类型是否是可执行文件；并通过程序首部信息，确定代码和数据在可执行文件中的位置并计算出对应的磁盘块地址。")]),t._v(" "),s("p",[t._v("3．操作系统：创建一个新进程，将HelloWorld可执行文件映射到该进程结构，表示由该进程执行helloworld程序。")]),t._v(" "),s("p",[t._v("4．操作系统：为helloworld程序设置cpu上下文环境，并跳到程序开始处。")]),t._v(" "),s("p",[t._v("5．执行helloworld程序的第一条指令，发生缺页异常")]),t._v(" "),s("p",[t._v("6．操作系统：分配一页物理内存，并将代码从磁盘读入内存，然后继续执行helloworld程序")]),t._v(" "),s("p",[t._v("7．helloword程序执行puts函数（系统调用），在显示器上写一字符串")]),t._v(" "),s("p",[t._v("8．操作系统：找到要将字符串送往的显示设备，通常设备是由一个进程控制的，所以，操作系统将要写的字符串送给该进程")]),t._v(" "),s("p",[t._v("9．操作系统：控制设备的进程告诉设备的窗口系统，它要显示该字符串，窗口系统确定这是一个合法的操作，然后将字符串转换成像素，将像素写入设备的存储映像区")]),t._v(" "),s("p",[t._v("10．视频硬件将像素转换成显示器可接收和一组控制数据信号")]),t._v(" "),s("p",[t._v("11．显示器解释信号，激发液晶屏")]),t._v(" "),s("p",[t._v("12．OK，我们在屏幕上看到了HelloWorld")]),t._v(" "),s("p",{attrs:{id:"为什么拷贝构造函数必须传引用不能传值"}}),t._v(" "),s("h2",{attrs:{id:"_27、为什么拷贝构造函数必须传引用不能传值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27、为什么拷贝构造函数必须传引用不能传值"}},[t._v("#")]),t._v(" 27、为什么拷贝构造函数必须传引用不能传值？")]),t._v(" "),s("ol",[s("li",[t._v("拷贝构造函数的作用就是用来复制对象的，在使用这个对象的实例来初始化这个对象的一个新的实例。")]),t._v(" "),s("li",[t._v('参数传递过程到底发生了什么？\n将地址传递和值传递统一起来，归根结底还是传递的是"值"(地址也是值，只不过通过它可以找到另一个值)！\na 值传递:\n对于内置数据类型的传递时，直接赋值拷贝给形参(注意形参是函数内局部变量)；\n对于类类型的传递时，需要首先调用该类的拷贝构造函数来初始化形参(局部对象)；')])]),t._v(" "),s("p",[t._v("如void foo(class_type obj_local){}, 如果调用foo(obj); 首先class_type obj_local(obj) ,这样就定义了局部变量obj_local供函数内部使用")]),t._v(" "),s("p",[t._v("b 引用传递:\n无论对内置类型还是类类型，传递引用或指针最终都是传递的地址值！而地址总是指针类型(属于简单类型), 显然参数传递时，按简单类型的赋值拷贝，而不会有拷贝构造函数的调用(对于类类型).\n上述1) 2)回答了为什么拷贝构造函数使用值传递会产生无限递归调用，内存溢出。")]),t._v(" "),s("p",[t._v("拷贝构造函数用来初始化一个非引用类类型对象，如果用传值的方式进行传参数，那么构造实参需要调用拷贝构造函数，而拷贝构造函数需要传递实参，所以会一直递归。")]),t._v(" "),s("p",{attrs:{id:"静态函数能定义为虚函数吗长函数呢"}}),t._v(" "),s("h2",{attrs:{id:"_28、静态函数能定义为虚函数吗-常函数呢-说说你的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28、静态函数能定义为虚函数吗-常函数呢-说说你的理解"}},[t._v("#")]),t._v(" 28、静态函数能定义为虚函数吗？常函数呢？说说你的理解")]),t._v(" "),s("p",[t._v("1、static成员不属于任何类对象或类实例，所以即使给此函数加上virutal也是没有任何意义的。")]),t._v(" "),s("p",[t._v("2、静态与非静态成员函数之间有一个主要的区别，那就是静态成员函数没有this指针。")]),t._v(" "),s("p",[t._v("虚函数依靠vptr和vtable来处理。vptr是一个指针，在类的构造函数中创建生成，并且只能用this指针来访问它，因为它是类的一个成员，并且vptr指向保存虚函数地址的vtable.对于静态成员函数，它没有this指针，所以无法访问vptr。")]),t._v(" "),s("p",[t._v("这就是为何static函数不能为virtual，虚函数的调用关系：this -> vptr -> vtable ->virtual function。")]),t._v(" "),s("p",{attrs:{id:"虚函数的代价"}}),t._v(" "),s("h2",{attrs:{id:"_29、虚函数的代价是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29、虚函数的代价是什么"}},[t._v("#")]),t._v(" 29、虚函数的代价是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("带有虚函数的类，每一个类会产生一个虚函数表，用来存储指向虚成员函数的指针，增大类；")])]),t._v(" "),s("li",[s("p",[t._v("带有虚函数的类的每一个对象，都会有有一个指向虚表的指针，会增加对象的空间大小；")])]),t._v(" "),s("li",[s("p",[t._v("不能再是内联的函数，因为内联函数在编译阶段进行替代，而虚函数表示等待，在运行阶段才能确定到低是采用哪种函数，虚函数不能是内联函数。")])])]),t._v(" "),s("p",{attrs:{id:"说一说你了解到的移动构造函数"}}),t._v(" "),s("h2",{attrs:{id:"_30、说一说你了解到的移动构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30、说一说你了解到的移动构造函数"}},[t._v("#")]),t._v(" 30、说一说你了解到的移动构造函数？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("有时候我们会遇到这样一种情况，我们用对象a初始化对象b后对象a我们就不在使用了，但是对象a的空间还在呀（在析构之前），既然拷贝构造函数，实际上就是把a对象的内容复制一份到b中，那么为什么我们不能直接使用a的空间呢？这样就避免了新的空间的分配，大大降低了构造的成本。这就是移动构造函数设计的初衷；")])]),t._v(" "),s("li",[s("p",[t._v("拷贝构造函数中，对于指针，我们一定要采用深层复制，而移动构造函数中，对于指针，我们采用浅层复制；")])]),t._v(" "),s("li",[s("p",[t._v("C++引入了移动构造函数，专门处理这种，用a初始化b后，就将a析构的情况；")])]),t._v(" "),s("li",[s("p",[t._v("与拷贝类似，移动也使用一个对象的值设置另一个对象的值。但是，又与拷贝不同的是，移动实现的是对象值真实的转移（源对象到目的对象）：源对象将丢失其内容，其内容将被目的对象占有。移动操作的发生的时候，是当移动值的对象是未命名的对象的时候。这里未命名的对象就是那些临时变量，甚至都不会有名称。典型的未命名对象就是函数的返回值或者类型转换的对象。使用临时对象的值初始化另一个对象值，不会要求对对象的复制：因为临时对象不会有其它使用，因而，它的值可以被移动到目的对象。做到这些，就要使用移动构造函数和移动赋值：当使用一个临时变量对象进行构造初始化的时候，调用移动构造函数。类似的，使用未命名的变量的值赋给一个对象时，调用移动赋值操作；")])]),t._v(" "),s("li")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Example6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Example6"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// move assignment")]),t._v("\n  Example6"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Example6"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   ptr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",{attrs:{id:"什么时候合成构造函数都说一说你知道的都说一下"}}),t._v(" "),s("h2",{attrs:{id:"_31、-什么情况下会合成构造函数-都说一说-你知道的都说一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31、-什么情况下会合成构造函数-都说一说-你知道的都说一下"}},[t._v("#")]),t._v(" 31、 什么情况下会合成构造函数？都说一说，你知道的都说一下")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果一个类没有任何构造函数，但他含有一个成员对象，该成员对象含有默认构造函数，那么编译器就为该类合成一个默认构造函数，因为不合成一个默认构造函数那么该成员对象的构造函数不能调用；")])]),t._v(" "),s("li",[s("p",[t._v("没有任何构造函数的类派生自一个带有默认构造函数的基类，那么需要为该派生类合成一个构造函数，只有这样基类的构造函数才能被调用；")])]),t._v(" "),s("li",[s("p",[t._v("带有虚函数的类，虚函数的引入需要进入虚表，指向虚表的指针，该指针是在构造函数中初始化的，所以没有构造函数的话该指针无法被初始化；")])]),t._v(" "),s("li",[s("p",[t._v("带有一个虚基类的类")])])]),t._v(" "),s("p",[t._v("还有一点需要注意的是：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("并不是任何没有构造函数的类都会合成一个构造函数")])]),t._v(" "),s("li",[s("p",[t._v("编译器合成出来的构造函数并不会显示设定类内的每一个成员变量")])])]),t._v(" "),s("p",{attrs:{id:"那什么时候需要合成拷贝构造函数呢"}}),t._v(" "),s("h2",{attrs:{id:"_32、那什么时候需要合成拷贝构造函数呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32、那什么时候需要合成拷贝构造函数呢"}},[t._v("#")]),t._v(" 32、那什么时候需要合成拷贝构造函数呢？")]),t._v(" "),s("p",[t._v("有三种情况会以一个对象的内容作为另一个对象的初值：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("对一个对象做显示的初始化操作，X xx = x;")])]),t._v(" "),s("li",[s("p",[t._v("当对象被当做参数交给某个函数时；")])]),t._v(" "),s("li",[s("p",[t._v("当函数传回一个类对象时；")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类没有拷贝构造函数，但是含有一个类类型的成员变量，该类型含有拷贝构造函数，此时编译器会为该类合成一个拷贝构造函数；")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类没有拷贝构造函数，但是该类继承自含有拷贝构造函数的基类，此时编译器会为该类合成一个拷贝构造函数；")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类没有拷贝构造函数，但是该类声明或继承了虚函数，此时编译器会为该类合成一个拷贝构造函数；")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类没有拷贝构造函数，但是该类含有虚基类，此时编译器会为该类合成一个拷贝构造函数；")])])]),t._v(" "),s("p",{attrs:{id:"构造函数的执行顺序是什么"}}),t._v(" "),s("h2",{attrs:{id:"_33、构造函数的执行顺序是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33、构造函数的执行顺序是什么"}},[t._v("#")]),t._v(" 33、构造函数的执行顺序是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在派生类构造函数中，所有的虚基类及上一层基类的构造函数调用；")])]),t._v(" "),s("li",[s("p",[t._v("对象的vptr被初始化；")])]),t._v(" "),s("li",[s("p",[t._v("如果有成员初始化列表，将在构造函数体内扩展开来，这必须在vptr被设定之后才做；")])]),t._v(" "),s("li",[s("p",[t._v("执行程序员所提供的代码；")])])]),t._v(" "),s("p",{attrs:{id:"一个类中的全部构造函数的扩展过程是什么"}}),t._v(" "),s("h2",{attrs:{id:"_34、一个类中的全部构造函数的扩展过程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、一个类中的全部构造函数的扩展过程是什么"}},[t._v("#")]),t._v(" 34、一个类中的全部构造函数的扩展过程是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("记录在成员初始化列表中的数据成员初始化操作会被放在构造函数的函数体内，并与成员的声明顺序为顺序；")])]),t._v(" "),s("li",[s("p",[t._v("如果一个成员并没有出现在成员初始化列表中，但它有一个默认构造函数，那么默认构造函数必须被调用；")])]),t._v(" "),s("li",[s("p",[t._v("如果class有虚表，那么它必须被设定初值；")])]),t._v(" "),s("li",[s("p",[t._v("所有上一层的基类构造函数必须被调用；")])]),t._v(" "),s("li",[s("p",[t._v("所有虚基类的构造函数必须被调用。")])])]),t._v(" "),s("p",{attrs:{id:"哪些函数不能是虚函数把你知道的都说一说"}}),t._v(" "),s("h2",{attrs:{id:"_35、哪些函数不能是虚函数-把你知道的都说一说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35、哪些函数不能是虚函数-把你知道的都说一说"}},[t._v("#")]),t._v(" 35、哪些函数不能是虚函数？把你知道的都说一说")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("构造函数，构造函数初始化对象，派生类必须知道基类函数干了什么，才能进行构造；当有虚函数时，每一个类有一个虚表，每一个对象有一个虚表指针，虚表指针在构造函数中初始化；")])]),t._v(" "),s("li",[s("p",[t._v("内联函数，内联函数表示在编译阶段进行函数体的替换操作，而虚函数意味着在运行期间进行类型确定，所以内联函数不能是虚函数；")])]),t._v(" "),s("li",[s("p",[t._v("静态函数，静态函数不属于对象属于类，静态成员函数没有this指针，因此静态函数设置为虚函数没有任何意义。")])]),t._v(" "),s("li",[s("p",[t._v("友元函数，友元函数不属于类的成员函数，不能被继承。对于没有继承特性的函数没有虚函数的说法。")])]),t._v(" "),s("li",[s("p",[t._v("普通函数，普通函数不属于类的成员函数，不具有继承特性，因此普通函数没有虚函数。")])])]),t._v(" "),s("p",{attrs:{id:"什么是纯虚函数与虚函数的区别"}}),t._v(" "),s("h2",{attrs:{id:"_36、什么是纯虚函数-与虚函数的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、什么是纯虚函数-与虚函数的区别"}},[t._v("#")]),t._v(" 36、什么是纯虚函数，与虚函数的区别")]),t._v(" "),s("p",[s("strong",[t._v("虚函数和纯虚函数区别")]),t._v("？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("虚函数是为了实现动态编联产生的，目的是通过基类类型的指针指向不同对象时，自动调用相应的、和基类同名的函数（使用同一种调用形式，既能调用派生类又能调用基类的同名函数）。虚函数需要在基类中加上virtual修饰符修饰，因为virtual会被隐式继承，所以子类中相同函数都是虚函数。当一个成员函数被声明为虚函数之后，其派生类中同名函数自动成为虚函数，在派生类中重新定义此函数时要求函数名、返回值类型、参数个数和类型全部与基类函数相同。")])]),t._v(" "),s("li",[s("p",[t._v("纯虚函数只是相当于一个接口名，但含有纯虚函数的类不能够实例化。")])])]),t._v(" "),s("p",[t._v("纯虚函数首先是虚函数，其次它没有函数体，取而代之的是用“=0”。")]),t._v(" "),s("p",[t._v("既然是虚函数，它的函数指针会被存在虚函数表中，由于纯虚函数并没有具体的函数体，因此它在虚函数表中的值就为0，而具有函数体的虚函数则是函数的具体地址。")]),t._v(" "),s("p",[t._v("一个类中如果有纯虚函数的话，称其为抽象类。抽象类不能用于实例化对象，否则会报错。抽象类一般用于定义一些公有的方法。子类继承抽象类也必须实现其中的纯虚函数才能实例化对象。")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"普通虚函数"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Base")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子类实现的纯虚函数"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tBase"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Son"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tb"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//普通虚函数")]),t._v("\n\tb"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//子类实现的纯虚函数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",{attrs:{id:"reference"}}),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("blockquote",[s("p",[t._v("《C++中的虚函数》https://blog.csdn.net/wuchuanpingstone/article/details/6742465")]),t._v(" "),s("p",[t._v("《C++虚函数简介》https://blog.csdn.net/xiaoyanilw/article/details/108575035")]),t._v(" "),s("p",[t._v("《C++ Map用法》https://blog.csdn.net/sevenjoin/article/details/81943864")]),t._v(" "),s("p",[t._v("《C++中堆（heap）和栈(stack)的区别》：https://blog.csdn.net/qq_34175893/article/details/83502412")]),t._v(" "),s("p",[t._v("《虚函数表存放在哪里》：https://blog.csdn.net/u013270326/article/details/82830656")]),t._v(" "),s("p",[t._v("《"),s("a",{attrs:{href:"https://www.cnblogs.com/ITziyuan/p/9487760.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("C语言与C++有什么区别？"),s("OutboundLink")],1),t._v("》https://www.cnblogs.com/ITziyuan/p/9487760.md")]),t._v(" "),s("p",[t._v("《C++和java的区别和联系》：https://www.cnblogs.com/tanrong/p/8503202.md")]),t._v(" "),s("p",[t._v("《struct结构在C和C++中的区别》：https://blog.csdn.net/mm_hh/article/details/70456240")]),t._v(" "),s("p",[t._v("《C++ 顶层const与底层const总结》：https://www.jianshu.com/p/fbbcf11100f6")]),t._v(" "),s("p",[t._v("《C++的顶层const和底层const浅析》：https://blog.csdn.net/qq_37059483/article/details/78811231")]),t._v(" "),s("p",[t._v("《C++:override和final》：https://www.cnblogs.com/whlook/p/6501918.md")]),t._v(" "),s("p",[t._v("C++的直接初始化与复制初始化的区别：https://blog.csdn.net/qq936836/article/details/83450218")]),t._v(" "),s("p",[t._v('《extern "C"的功能和用法研究》：https://blog.csdn.net/sss_369/article/details/84060561')]),t._v(" "),s("p",[t._v("《类和函数模板特例化》：https://blog.csdn.net/wang664626482/article/details/52372789")]),t._v(" "),s("p",[t._v("《C++实现多态的原理》：https://blog.csdn.net/qq_37954088/article/details/79947898")]),t._v(" "),s("p",[t._v("《浅谈C++中的几种构造函数》：https://blog.csdn.net/zxc024000/article/details/51153743")]),t._v(" "),s("p",[t._v("《C++面试题之浅拷贝和深拷贝的区别》：https://blog.csdn.net/caoshangpa/article/details/79226270")]),t._v(" "),s("p",[t._v("《构造函数、析构函数、虚函数可否内联，有何意义》：https://www.cnblogs.com/helloweworld/archive/2013/06/14/3136705.md")]),t._v(" "),s("p",[t._v("《auto和decltype的用法总结》：https://www.cnblogs.com/XiangfeiAi/p/4451904.md")]),t._v(" "),s("p",[t._v("《C++11新特性中auto 和 decltype 区别和联系》：https://www.jb51.net/article/103666.htm")]),t._v(" "),s("p",[t._v("《写程序判断系统是大端序还是小端序》：https://www.cnblogs.com/zhoudayang/p/5985563.md")]),t._v(" "),s("p",[t._v("《C++拷贝构造函数详解》：https://www.cnblogs.com/alantu2018/p/8459250.md")]),t._v(" "),s("p",[t._v("《【C++】几种类型的new介绍》：https://www.jianshu.com/p/9b57e769c3cb")]),t._v(" "),s("p",[t._v("《NULL和nullptr区别》：https://blog.csdn.net/qq_39380590/article/details/82563571")]),t._v(" "),s("p",[t._v("《C/C++内存管理详解》：https://chenqx.github.io/2014/09/25/Cpp-Memory-Management/")]),t._v(" "),s("p",[t._v("《C++异常处理（try catch throw）完全攻略》：http://c.biancheng.net/view/422.md")]),t._v(" "),s("p",[t._v("《C++STL 》https://www.bilibili.com/video/BV1db411q7B8?p=12")]),t._v(" "),s("p",[t._v("《C++内存管理》https://www.bilibili.com/video/BV1Kb411B7N8?p=25")]),t._v(" "),s("p",[t._v("《C++中的 trivial destructor》：https://blog.csdn.net/wudishine/article/details/12307611")]),t._v(" "),s("p",[t._v("《C++封装继承多态总结》：https://blog.csdn.net/IOT_SHUN/article/details/79674293")]),t._v(" "),s("p",[t._v("《C++类对象成员变量和函数内存分配的问题》：https://blog.csdn.net/z2664836046/article/details/78967313")]),t._v(" "),s("p",[t._v("《为什么用成员初始化列表会快一些？》：https://blog.csdn.net/JackZhang_123/article/details/82590368")]),t._v(" "),s("p",[t._v("《为什么C++不能有虚构造函数，却可以有虚析构函数》：https://dwz.cn/lnfW9H6m")]),t._v(" "),s("p",[t._v("《构造函数或者析构函数中调用虚函数会怎么样？》：https://dwz.cn/TaJTJONX")]),t._v(" "),s("p",[t._v("《智能指针的原理及实现》：https://blog.csdn.net/lizhentao0707/article/details/81156384")]),t._v(" "),s("p",[t._v("《C++构造函数的default和delete》：https://blog.csdn.net/u010591680/article/details/71101737")]),t._v(" "),s("p",[t._v("《C/C++函数调用过程分析》：https://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601204.md")]),t._v(" "),s("p",[t._v("《C/C++函数调用的压栈模型》：https://blog.csdn.net/m0_37717595/article/details/80368411")]),t._v(" "),s("p",[t._v("《C++临时变量不能作为函数的返回值？》：https://www.wandouip.com/t5i204349/")]),t._v(" "),s("p",[t._v("《C++中this指针的用法详解》http://blog.chinaunix.net/uid-21411227-id-1826942.md")]),t._v(" "),s("p",[t._v("《C++ 智能指针（及循环引用问题）》：https://blog.csdn.net/m0_37968340/article/details/76737395")]),t._v(" "),s("p",[t._v("《C++中的静态绑定和动态绑定》：https://www.cnblogs.com/lizhenghn/p/3657717.md")]),t._v(" "),s("p",[t._v("《C++经典面试题》：https://www.cnblogs.com/yjd_hycf_space/p/7495640.md")]),t._v(" "),s("p",[t._v("《C++ 虚函数表解析》：https://blog.csdn.net/haoel/article/details/1948051/")]),t._v(" "),s("p",[t._v("《操作系统（三）》：https://www.nowcoder.com/tutorial/93/675fd4af3ab34b2db0ae650855aa52d5")]),t._v(" "),s("p",[t._v("《互斥锁、读写锁、自旋锁、条件变量的特点总结》：https://blog.csdn.net/RUN32875094/article/details/80169978")]),t._v(" "),s("p",[t._v("《c++右值引用以及使用》：https://www.cnblogs.com/likaiming/p/9045642.md")]),t._v(" "),s("p",[t._v("《从4行代码看右值引用》：https://www.cnblogs.com/likaiming/p/9029908.md")]),t._v(" "),s("p",[t._v("《Free的前世今生》https://blog.csdn.net/YMY_me/article/details/811801")]),t._v(" "),s("p",[t._v("《友元函数和友元类》：https://www.cnblogs.com/zhuguanhao/p/6286145.md")]),t._v(" "),s("p",[t._v("《程序员求职宝典》王道论坛")]),t._v(" "),s("p",[t._v("《STL源码解析》侯捷")])])])}),[],!1,null,null,null);a.default=n.exports}}]);
