(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{439:function(t,a,s){"use strict";s.r(a);var e=s(62),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{align:"center"}},[t._v("C++之基础语法")]),t._v(" "),s("p",{attrs:{id:"在main执行之前和之后执行的代码可能是什么"}}),t._v(" "),s("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[s("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),s("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),s("p",[t._v("2、👉23年5月份阿秀从"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),s("div",{attrs:{align:"center"}}),t._v("网站地址："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),s("p"),t._v("3、😊\n    分享一个学弟发给我的"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),s("p"),t._v(" "),s("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),s("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),s("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),s("h2",{attrs:{id:"_81、知道c-中的组合吗-它与继承相比有什么优缺点吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_81、知道c-中的组合吗-它与继承相比有什么优缺点吗"}},[t._v("#")]),t._v(" 81、知道C++中的组合吗？它与继承相比有什么优缺点吗？")]),t._v(" "),s("p",[s("strong",[t._v("一：继承")])]),t._v(" "),s("p",[t._v("继承是Is a 的关系，比如说Student继承Person,则说明Student is a Person。继承的优点是子类可以重写父类的方法来方便地实现对父类的扩展。")]),t._v(" "),s("p",[t._v("继承的缺点有以下几点：")]),t._v(" "),s("p",[t._v("①：父类的内部细节对子类是可见的。")]),t._v(" "),s("p",[t._v("②：子类从父类继承的方法在编译时就确定下来了，所以无法在运行期间改变从父类继承的方法的行为。")]),t._v(" "),s("p",[t._v("③：如果对父类的方法做了修改的话（比如增加了一个参数），则子类的方法必须做出相应的修改。所以说子类与父类是一种高耦合，违背了面向对象思想。")]),t._v(" "),s("p",[s("strong",[t._v("二：组合")])]),t._v(" "),s("p",[t._v("组合也就是设计类的时候把要组合的类的对象加入到该类中作为自己的成员变量。")]),t._v(" "),s("p",[t._v("组合的优点：")]),t._v(" "),s("p",[t._v("①：当前对象只能通过所包含的那个对象去调用其方法，所以所包含的对象的内部细节对当前对象时不可见的。")]),t._v(" "),s("p",[t._v("②：当前对象与包含的对象是一个低耦合关系，如果修改包含对象的类中代码不需要修改当前对象类的代码。")]),t._v(" "),s("p",[t._v("③：当前对象可以在运行时动态的绑定所包含的对象。可以通过set方法给所包含对象赋值。")]),t._v(" "),s("p",[t._v("组合的缺点：①：容易产生过多的对象。②：为了能组合多个对象，必须仔细对接口进行定义。")]),t._v(" "),s("p",{attrs:{id:"函数指针函数指针"}}),t._v(" "),s("h2",{attrs:{id:"_82、函数指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_82、函数指针"}},[t._v("#")]),t._v(" 82、函数指针？")]),t._v(" "),s("p",[s("strong",[t._v("1)  什么是函数指针?")])]),t._v(" "),s("p",[t._v("函数指针指向的是特殊的数据类型，函数的类型是由其返回的数据类型和其参数列表共同决定的，而函数的名称则不是其类型的一部分。")]),t._v(" "),s("p",[t._v("一个具体函数的名字，如果后面不跟调用符号(即括号)，则该名字就是该函数的指针(注意：大部分情况下，可以这么认为，但这种说法并不很严格)。")]),t._v(" "),s("p",[s("strong",[t._v("2)  函数指针的声明方法")])]),t._v(" "),s("p",[t._v("int (*pf)(const int&, const int&); (1)")]),t._v(" "),s("p",[t._v("上面的pf就是一个函数指针，指向所有返回类型为int，并带有两个const int&参数的函数。注意*pf两边的括号是必须的，否则上面的定义就变成了：")]),t._v(" "),s("p",[t._v("int *pf(const int&, const int&); (2)")]),t._v(" "),s("p",[t._v("而这声明了一个函数pf，其返回类型为int *， 带有两个const int&参数。")]),t._v(" "),s("p",[s("strong",[t._v("3)  为什么有函数指针")])]),t._v(" "),s("p",[t._v("函数与数据项相似，函数也有地址。我们希望在同一个函数中通过使用相同的形参在不同的时间使用产生不同的效果。")]),t._v(" "),s("p",[s("strong",[t._v("4)  一个函数名就是一个指针，它指向函数的代码。")])]),t._v(" "),s("p",[t._v("一个函数地址是该函数的进入点，也就是调用函数的地址。函数的调用可以通过函数名，也可以通过指向函数的指针来调用。函数指针还允许将函数作为变元传递给其他函数；")]),t._v(" "),s("p",[s("strong",[t._v("5)  两种方法赋值：")])]),t._v(" "),s("p",[t._v("指针名 = 函数名；  指针名 = &函数名")]),t._v(" "),s("p",{attrs:{id:"说一说你理解的内存对齐以及原因"}}),t._v(" "),s("h2",{attrs:{id:"_83、说一说你理解的内存对齐以及原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_83、说一说你理解的内存对齐以及原因"}},[t._v("#")]),t._v(" 83、说一说你理解的内存对齐以及原因")]),t._v(" "),s("p",[t._v("1、 分配内存的顺序是按照声明的顺序。")]),t._v(" "),s("p",[t._v("2、 每个变量相对于起始位置的偏移量必须是该变量类型大小的整数倍，不是整数倍空出内存，直到偏移量是整数倍为止。")]),t._v(" "),s("p",[t._v("3、 最后整个结构体的大小必须是里面变量类型最大值的整数倍。")]),t._v(" "),s("p",[t._v("添加了#pragma pack(n)后规则就变成了下面这样：")]),t._v(" "),s("p",[t._v("1、 偏移量要是n和当前变量大小中较小值的整数倍")]),t._v(" "),s("p",[t._v("2、 整体大小要是n和最大变量大小中较小值的整数倍")]),t._v(" "),s("p",[t._v("3、 n值必须为1,2,4,8…，为其他值时就按照默认的分配规则")]),t._v(" "),s("p",{attrs:{id:"结构体变量比较是否相等"}}),t._v(" "),s("h2",{attrs:{id:"_84、-结构体变量比较是否相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_84、-结构体变量比较是否相等"}},[t._v("#")]),t._v(" 84、 结构体变量比较是否相等")]),t._v(" "),s("ol",[s("li",[t._v("重载了 “==” 操作符")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//* *操作运算符重载*")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("元素的话，一个个比；")])]),t._v(" "),s("li",[s("p",[t._v("指针直接比较，如果保存的是同一个实例地址，则(p1==p2)为真；")])])]),t._v(" "),s("p",{attrs:{id:"函数调用过程栈的变化返回值和参数变量哪个先入栈"}}),t._v(" "),s("h2",{attrs:{id:"_85、-函数调用过程栈的变化-返回值和参数变量哪个先入栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_85、-函数调用过程栈的变化-返回值和参数变量哪个先入栈"}},[t._v("#")]),t._v(" 85、 函数调用过程栈的变化，返回值和参数变量哪个先入栈？")]),t._v(" "),s("p",[t._v("1、调用者函数把被调函数所需要的参数按照与被调函数的形参顺序相反的顺序压入栈中,即:从右向左依次把被调")]),t._v(" "),s("p",[t._v("​       函数所需要的参数压入栈;")]),t._v(" "),s("p",[t._v("2、调用者函数使用call指令调用被调函数,并把call指令的下一条指令的地址当成返回地址压入栈中(这个压栈操作")]),t._v(" "),s("p",[t._v("​       隐含在call指令中);")]),t._v(" "),s("p",[t._v("3、在被调函数中,被调函数会先保存调用者函数的栈底地址(push ebp),然后再保存调用者函数的栈顶地址,即:当前")]),t._v(" "),s("p",[t._v("​      被调函数的栈底地址(mov ebp,esp);")]),t._v(" "),s("p",[t._v("4、在被调函数中,从ebp的位置处开始存放被调函数中的局部变量和临时变量,并且这些变量的地址按照定义时的")]),t._v(" "),s("p",[t._v("​      顺序依次减小,即:这些变量的地址是按照栈的延伸方向排列的,先定义的变量先入栈,后定义的变量后入栈;")]),t._v(" "),s("p",{attrs:{id:"defineconsttypedefinline的使用方法"}}),t._v(" "),s("h2",{attrs:{id:"_86、define、const、typedef、inline的使用方法-他们之间有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_86、define、const、typedef、inline的使用方法-他们之间有什么区别"}},[t._v("#")]),t._v(" 86、define、const、typedef、inline的使用方法？他们之间有什么区别？")]),t._v(" "),s("p",[t._v("一、const与#define的区别：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("const定义的常量是变量带类型，而#define定义的只是个常数不带类型；")])]),t._v(" "),s("li",[s("p",[t._v("define只在预处理阶段起作用，简单的文本替换，而const在编译、链接过程中起作用；")])]),t._v(" "),s("li",[s("p",[t._v("define只是简单的字符串替换没有类型检查。而const是有数据类型的，是要进行判断的，可以避免一些低级错误；")])]),t._v(" "),s("li",[s("p",[t._v("define预处理后，占用代码段空间，const占用数据段空间；")])]),t._v(" "),s("li",[s("p",[t._v("const不能重定义，而define可以通过#undef取消某个符号的定义，进行重定义；")])]),t._v(" "),s("li",[s("p",[t._v("define独特功能，比如可以用来防止文件重复引用。")])])]),t._v(" "),s("p",[t._v("二、#define和别名typedef的区别")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("执行时间不同，typedef在编译阶段有效，typedef有类型检查的功能；#define是宏定义，发生在预处理阶段，不进行类型检查；")])]),t._v(" "),s("li",[s("p",[t._v("功能差异，typedef用来定义类型的别名，定义与平台无关的数据类型，与struct的结合使用等。#define不只是可以为类型取别名，还可以定义常量、变量、编译开关等。")])]),t._v(" "),s("li",[s("p",[t._v("作用域不同，#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用。而typedef有自己的作用域。")])])]),t._v(" "),s("p",[t._v("三、  define与inline的区别")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("#define是关键字，inline是函数；")])]),t._v(" "),s("li",[s("p",[t._v("宏定义在预处理阶段进行文本替换，inline函数在编译阶段进行替换；")])]),t._v(" "),s("li",[s("p",[t._v("inline函数有类型检查，相比宏定义比较安全；")])])]),t._v(" "),s("p",{attrs:{id:"你知道printf函数的实现原理是什么吗"}}),t._v(" "),s("h2",{attrs:{id:"_87、你知道printf函数的实现原理是什么吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_87、你知道printf函数的实现原理是什么吗"}},[t._v("#")]),t._v(" 87、你知道printf函数的实现原理是什么吗？")]),t._v(" "),s("p",[t._v("在C/C++中，对函数参数的扫描是从后向前的。")]),t._v(" "),s("p",[t._v("C/C++的函数参数是通过压入堆栈的方式来给函数传参数的（堆栈是一种先进后出的数据结构），最先压入的参数最后出来，在计算机的内存中，数据有2块，一块是堆，一块是栈（函数参数及局部变量在这里），而栈是从内存的高地址向低地址生长的，控制生长的就是堆栈指针了，最先压入的参数是在最上面，就是说在所有参数的最后面，最后压入的参数在最下面，结构上看起来是第一个，所以最后压入的参数总是能够被函数找到，因为它就在堆栈指针的上方。")]),t._v(" "),s("p",[t._v('printf的第一个被找到的参数就是那个字符指针，就是被双引号括起来的那一部分，函数通过判断字符串里控制参数的个数来判断参数个数及数据类型，通过这些就可算出数据需要的堆栈指针的偏移量了，下面给出printf("%d,%d",a,b);（其中a、b都是int型的）的汇编代码.')]),t._v(" "),s("p",{attrs:{id:"为什么模板类一般都是放在一个h文件中"}}),t._v(" "),s("h2",{attrs:{id:"_88、为什么模板类一般都是放在一个h文件中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_88、为什么模板类一般都是放在一个h文件中"}},[t._v("#")]),t._v(" 88、为什么模板类一般都是放在一个h文件中")]),t._v(" "),s("ol",[s("li",[t._v("模板定义很特殊。由template<…>处理的任何东西都意味着编译器在当时不为它分配存储空间，它一直处于等待状态直到被一个模板实例告知。在编译器和连接器的某一处，有一机制能去掉指定模板的多重定义。")])]),t._v(" "),s("p",[t._v("所以为了容易使用，几乎总是在头文件中放置全部的模板声明和定义。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("在分离式编译的环境下，编译器编译某一个.cpp文件时并不知道另一个.cpp文件的存在，也不会去查找（当遇到未决符号时它会寄希望于连接器）。这种模式在没有模板的情况下运行良好，但遇到模板时就傻眼了，因为模板仅在需要的时候才会实例化出来。")])]),t._v(" "),s("p",[t._v("所以，当编译器只看到模板的声明时，它不能实例化该模板，只能创建一个具有外部连接的符号并期待连接器能够将符号的地址决议出来。")]),t._v(" "),s("p",[t._v("然而当实现该模板的.cpp文件中没有用到模板的实例时，编译器懒得去实例化，所以，整个工程的.obj中就找不到一行模板实例的二进制代码，于是连接器也黔驴技穷了。")]),t._v(" "),s("p",{attrs:{id:"类成员的访问权限和继承权限问题"}}),t._v(" "),s("h2",{attrs:{id:"_89、c-中类成员的访问权限和继承权限问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_89、c-中类成员的访问权限和继承权限问题"}},[t._v("#")]),t._v(" 89、C++中类成员的访问权限和继承权限问题")]),t._v(" "),s("ol",[s("li",[t._v("三种访问权限")])]),t._v(" "),s("p",[t._v("①   public:用该关键字修饰的成员表示公有成员，该成员不仅可以在类内可以被  访问，在类外也是可以被访问的，是类对外提供的可访问接口；")]),t._v(" "),s("p",[t._v("②   private:用该关键字修饰的成员表示私有成员，该成员仅在类内可以被访问，在类体外是隐藏状态；")]),t._v(" "),s("p",[t._v("③   protected:用该关键字修饰的成员表示保护成员，保护成员在类体外同样是隐藏状态，但是对于该类的派生类来说，相当于公有成员，在派生类中可以被访问。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("三种继承方式")])]),t._v(" "),s("p",[t._v("①   若继承方式是public，基类成员在派生类中的访问权限保持不变，也就是说，基类中的成员访问权限，在派生类中仍然保持原来的访问权限；")]),t._v(" "),s("p",[t._v("②  若继承方式是private，基类所有成员在派生类中的访问权限都会变为私有(private)权限；")]),t._v(" "),s("p",[t._v("③  若继承方式是protected，基类的共有成员和保护成员在派生类中的访问权限都会变为保护(protected)权限，私有成员在派生类中的访问权限仍然是私有(private)权限。")]),t._v(" "),s("p",{attrs:{id:"cout和printf有什么区别"}}),t._v(" "),s("h2",{attrs:{id:"_90、cout和printf有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_90、cout和printf有什么区别"}},[t._v("#")]),t._v(" 90、cout和printf有什么区别？")]),t._v(" "),s("p",[t._v("很多人认为cout<<是一个函数，其实不是的，它是类"),s("code",[t._v("std::ostream")]),t._v("的全局对象。")]),t._v(" "),s("p",[t._v("cout<<后可以跟不同的类型是因为cout<<已存在针对各种类型数据的重载，所以会自动识别数据的类型。")]),t._v(" "),s("p",[t._v("输出过程会首先将输出字符放入缓冲区，然后输出到屏幕。")]),t._v(" "),s("p",[t._v("cout是有缓冲输出:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n或cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc\\n "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("flush"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 这两个才是一样的"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("flush立即强迫缓冲输出。")]),t._v(" "),s("p",[t._v("printf是行缓冲输出，不是无缓冲输出。")]),t._v(" "),s("p",{attrs:{id:"你知道重载运算符吗"}}),t._v(" "),s("h2",{attrs:{id:"_91、你知道重载运算符吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_91、你知道重载运算符吗"}},[t._v("#")]),t._v(" 91、你知道重载运算符吗？")]),t._v(" "),s("p",[t._v("1、 我们只能重载已有的运算符，而无权发明新的运算符；对于一个重载的运算符，其优先级和结合律与内置类型一致才可以；不能改变运算符操作数个数；")]),t._v(" "),s("p",[t._v("2、  两种重载方式：成员运算符和非成员运算符，成员运算符比非成员运算符少一个参数；下标运算符、箭头运算符必须是成员运算符；")]),t._v(" "),s("p",[t._v("3、 引入运算符重载，是为了实现类的多态性；")]),t._v(" "),s("p",[t._v("4、 当重载的运算符是成员函数时，this绑定到左侧运算符对象。成员运算符函数的参数数量比运算符对象的数量少一个；至少含有一个类类型的参数；")]),t._v(" "),s("p",[t._v("5、 从参数的个数推断到底定义的是哪种运算符，当运算符既是一元运算符又是二元运算符（+，-，*，&）；")]),t._v(" "),s("p",[t._v("6、 下标运算符必须是成员函数，下标运算符通常以所访问元素的引用作为返回值，同时最好定义下标运算符的常量版本和非常量版本；")]),t._v(" "),s("p",[t._v("7、 箭头运算符必须是类的成员，解引用通常也是类的成员；重载的箭头运算符必须返回类的指针；")]),t._v(" "),s("p",{attrs:{id:"当程序中有函数重载时，函数的匹配原则和顺序是什么"}}),t._v(" "),s("h2",{attrs:{id:"_92、当程序中有函数重载时-函数的匹配原则和顺序是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_92、当程序中有函数重载时-函数的匹配原则和顺序是什么"}},[t._v("#")]),t._v(" 92、当程序中有函数重载时，函数的匹配原则和顺序是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("名字查找")])]),t._v(" "),s("li",[s("p",[t._v("确定候选函数")])]),t._v(" "),s("li",[s("p",[t._v("寻找最佳匹配")])])]),t._v(" "),s("p",{attrs:{id:"定义和声明的区别"}}),t._v(" "),s("h2",{attrs:{id:"_93、定义和声明的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_93、定义和声明的区别"}},[t._v("#")]),t._v(" 93、定义和声明的区别")]),t._v(" "),s("p",[s("strong",[t._v("如果是指变量的声明和定义：")]),t._v("\n从编译原理上来说，声明是仅仅告诉编译器，有个某类型的变量会被使用，但是编译器并不会为它分配任何内存。而定义就是分配了内存。")]),t._v(" "),s("p",[s("strong",[t._v("如果是指函数的声明和定义：")]),t._v("\n声明：一般在头文件里，对编译器说：这里我有一个函数叫function() 让编译器知道这个函数的存在。\n定义：一般在源文件里，具体就是函数的实现过程 写明函数体。")]),t._v(" "),s("p",{attrs:{id:"全局变量和static变量的区别"}}),t._v(" "),s("h2",{attrs:{id:"_94、全局变量和static变量的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_94、全局变量和static变量的区别"}},[t._v("#")]),t._v(" 94、全局变量和static变量的区别")]),t._v(" "),s("p",[t._v("1、全局变量（外部变量）的说明之前再冠以static就构成了静态的全局变量。")]),t._v(" "),s("p",[t._v("全局变量本身就是静态存储方式，静态全局变量当然也是静态存储方式。")]),t._v(" "),s("p",[t._v("这两者在存储方式上并无不同。这两者的区别在于非静态全局变量的作用域是整个源程序，当一个源程序由多个原文件组成时，非静态的全局变量在各个源文件中都是有效的。")]),t._v(" "),s("p",[t._v("而静态全局变量则限制了其作用域，即只在定义该变量的源文件内有效，在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其他源文件中引起错误。")]),t._v(" "),s("p",[t._v("static全局变量与普通的全局变量的区别是static全局变量只初始化一次，防止在其他文件单元被引用。")]),t._v(" "),s("p",[t._v("2.static函数与普通函数有什么区别？\nstatic函数与普通的函数作用域不同。尽在本文件中。只在当前源文件中使用的函数应该说明为内部函数（static），内部函数应该在当前源文件中说明和定义。")]),t._v(" "),s("p",[t._v("对于可在当前源文件以外使用的函数应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件。\nstatic函数与普通函数最主要区别是static函数在内存中只有一份，普通静态函数在每个被调用中维持一份拷贝程序的局部变量存在于（堆栈）中，全局变量存在于（静态区）中，动态申请数据存在于（堆）")]),t._v(" "),s("p",{attrs:{id:"静态成员与普通成员的区别是什么"}}),t._v(" "),s("h2",{attrs:{id:"_95、-静态成员与普通成员的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_95、-静态成员与普通成员的区别是什么"}},[t._v("#")]),t._v(" 95、 静态成员与普通成员的区别是什么？")]),t._v(" "),s("ol",[s("li",[t._v("生命周期")])]),t._v(" "),s("p",[t._v("静态成员变量从类被加载开始到类被卸载，一直存在；")]),t._v(" "),s("p",[t._v("普通成员变量只有在类创建对象后才开始存在，对象结束，它的生命期结束；")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("共享方式")])]),t._v(" "),s("p",[t._v("静态成员变量是全类共享；普通成员变量是每个对象单独享用的；")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("定义位置")])]),t._v(" "),s("p",[t._v("普通成员变量存储在栈或堆中，而静态成员变量存储在静态全局区；")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("初始化位置")])]),t._v(" "),s("p",[t._v("普通成员变量在类中初始化；静态成员变量在类外初始化；")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("默认实参")])]),t._v(" "),s("p",[t._v("可以使用静态成员变量作为默认实参，")]),t._v(" "),s("p",{attrs:{id:"说一下你理解的ifdefendif代表着什么"}}),t._v(" "),s("h2",{attrs:{id:"_96、说一下你理解的-ifdef-endif代表着什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_96、说一下你理解的-ifdef-endif代表着什么"}},[t._v("#")]),t._v(" 96、说一下你理解的 ifdef   endif代表着什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("一般情况下，源程序中所有的行都参加编译。但是有时希望对其中一部分内容只在满足一定条件才进行编译，也就是对一部分内容指定编译的条件，这就是“条件编译”。有时，希望当满足某条件时对一组语句进行编译，而当条件不满足时则编译另一组语句。")])]),t._v(" "),s("li",[s("p",[t._v("条件编译命令最常见的形式为：")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("标识符  ")])]),t._v("\n程序段"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")]),t._v("  ")]),t._v("\n程序段"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),s("p",[t._v("它的作用是：当标识符已经被定义过(一般是用#define命令定义)，则对程序段1进行编译，否则编译程序段2。\n其中#else部分也可以没有，即：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v("  ")]),t._v("\n程序段"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("在一个大的软件工程里面，可能会有多个文件同时包含一个头文件，当这些文件编译链接成一个可执行文件上时，就会出现大量“重定义”错误。")])]),t._v(" "),s("p",[t._v("在头文件中使用#define、#ifndef、#ifdef、#endif能避免头文件重定义。")]),t._v(" "),s("p",{attrs:{id:"隐式转换，如何消除隐式转换"}}),t._v(" "),s("h2",{attrs:{id:"_97、隐式转换-如何消除隐式转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_97、隐式转换-如何消除隐式转换"}},[t._v("#")]),t._v(" 97、隐式转换，如何消除隐式转换？")]),t._v(" "),s("p",[t._v("1、C++的基本类型中并非完全的对立，部分数据类型之间是可以进行隐式转换的。所谓隐式转换，是指不需要用户干预，编译器私下进行的类型转换行为。很多时候用户可能都不知道进行了哪些转换")]),t._v(" "),s("p",[t._v("2、C++面向对象的多态特性，就是通过父类的类型实现对子类的封装。通过隐式转换，你可以直接将一个子类的对象使用父类的类型进行返回。在比如，数值和布尔类型的转换，整数和浮点数的转换等。某些方面来说，隐式转换给C++程序开发者带来了不小的便捷。C++是一门强类型语言，类型的检查是非常严格的。")]),t._v(" "),s("p",[t._v("3、 基本数据类型 基本数据类型的转换以取值范围的作为转换基础（保证精度不丢失）。隐式转换发生在从小->大的转换中。比如从char转换为int。从int->long。自定义对象 子类对象可以隐式的转换为父类对象。")]),t._v(" "),s("p",[t._v("4、 C++中提供了explicit关键字，在构造函数声明的时候加上explicit关键字，能够禁止隐式转换。")]),t._v(" "),s("p",[t._v("5、如果构造函数只接受一个参数，则它实际上定义了转换为此类类型的隐式转换机制。可以通过将构造函数声明为explicit加以制止隐式类型转换，关键字explicit只对一个实参的构造函数有效，需要多个实参的构造函数不能用于执行隐式转换，所以无需将这些构造函数指定为explicit。")]),t._v(" "),s("p",{attrs:{id:"如何处理多个异常的"}}),t._v(" "),s("h2",{attrs:{id:"_98、c-如何处理多个异常的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_98、c-如何处理多个异常的"}},[t._v("#")]),t._v(" 98、C++如何处理多个异常的？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("C++中的异常情况：\n语法错误（编译错误）：比如变量未定义、括号不匹配、关键字拼写错误等等编译器在编译时能发现的错误，这类错误可以及时被编译器发现，而且可以及时知道出错的位置及原因，方便改正。\n运行时错误：比如数组下标越界、系统内存不足等等。这类错误不易被程序员发现，它能通过编译且能进入运行，但运行时会出错，导致程序崩溃。为了有效处理程序运行时错误，C++中引入异常处理机制来解决此问题。")])]),t._v(" "),s("li",[s("p",[t._v("C++异常处理机制：\n异常处理基本思想：执行一个函数的过程中发现异常，可以不用在本函数内立即进行处理， 而是抛出该异常，让函数的调用者直接或间接处理这个问题。\nC++异常处理机制由3个模块组成：try(检查)、throw(抛出)、catch(捕获)\n抛出异常的语句格式为：throw 表达式；如果try块中程序段发现了异常则抛出异常。")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  可能抛出异常的语句；（检查） "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n可能抛出异常的语句；（检查） \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("（类型名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("形参名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//捕获特定类型的异常 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//处理1； ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("（类型名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("形参名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//捕获特定类型的异常 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//处理2； ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("（…）"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//捕获所有类型的异常 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",{attrs:{id:"如何在不使用额外空间的情况下，交换两个数"}}),t._v(" "),s("h2",{attrs:{id:"_99、如何在不使用额外空间的情况下-交换两个数-你有几种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_99、如何在不使用额外空间的情况下-交换两个数-你有几种方法"}},[t._v("#")]),t._v(" 99、如何在不使用额外空间的情况下，交换两个数？你有几种方法")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  算术\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  异或\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能对int,char..")]),t._v("\n y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",{attrs:{id:"你知道strcpy和memcpy的区别是什么吗"}}),t._v(" "),s("h2",{attrs:{id:"_100、你知道strcpy和memcpy的区别是什么吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_100、你知道strcpy和memcpy的区别是什么吗"}},[t._v("#")]),t._v(" 100、你知道strcpy和memcpy的区别是什么吗？")]),t._v(" "),s("p",[t._v('1、复制的内容不同。strcpy只能复制字符串，而memcpy可以复制任意内容，例如字符数组、整型、结构体、类等。\n2、复制的方法不同。strcpy不需要指定长度，它遇到被复制字符的串结束符"\\0"才结束，所以容易溢出。memcpy则是根据其第3个参数决定复制的长度。\n3、用途不同。通常在复制字符串时用strcpy，而需要复制其他类型数据时则一般用memcpy')]),t._v(" "),s("p",{attrs:{id:"程序在执行时的内存结构你了解吗"}})])}),[],!1,null,null,null);a.default=r.exports}}]);
