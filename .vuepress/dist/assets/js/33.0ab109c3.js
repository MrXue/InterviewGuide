(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{450:function(t,s,a){"use strict";a.r(s);var _=a(62),v=Object(_.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{align:"center"}},[t._v("操作系统")]),t._v(" "),a("p",{attrs:{id:"进程线程和协程的区别和联系"}}),t._v(" "),a("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[a("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),a("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),a("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),a("p",[t._v("2、👉23年5月份阿秀从"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),a("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),a("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),a("div",{attrs:{align:"center"}}),t._v("网站地址："),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),a("p"),t._v("3、😊\n    分享一个学弟发给我的"),a("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),a("p"),t._v(" "),a("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),a("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),a("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),a("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),a("h2",{attrs:{id:"_1、进程、线程和协程的区别和联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程、线程和协程的区别和联系"}},[t._v("#")]),t._v(" 1、进程、线程和协程的区别和联系")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("进程")]),t._v(" "),a("th",[t._v("线程")]),t._v(" "),a("th",[t._v("协程")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("定义")]),t._v(" "),a("td",[t._v("资源分配和拥有的基本单位")]),t._v(" "),a("td",[t._v("程序执行的基本单位")]),t._v(" "),a("td",[t._v("用户态的轻量级线程，线程内部调度的基本单位")])]),t._v(" "),a("tr",[a("td",[t._v("切换情况")]),t._v(" "),a("td",[t._v("进程CPU环境(栈、寄存器、页表和文件句柄等)的保存以及新调度的进程CPU环境的设置")]),t._v(" "),a("td",[t._v("保存和设置程序计数器、少量寄存器和栈的内容")]),t._v(" "),a("td",[t._v("先将寄存器上下文和栈保存，等切换回来的时候再进行恢复")])]),t._v(" "),a("tr",[a("td",[t._v("切换者")]),t._v(" "),a("td",[t._v("操作系统")]),t._v(" "),a("td",[t._v("操作系统")]),t._v(" "),a("td",[t._v("用户")])]),t._v(" "),a("tr",[a("td",[t._v("切换过程")]),t._v(" "),a("td",[t._v("用户态->内核态->用户态")]),t._v(" "),a("td",[t._v("用户态->内核态->用户态")]),t._v(" "),a("td",[t._v("用户态(没有陷入内核)")])]),t._v(" "),a("tr",[a("td",[t._v("调用栈")]),t._v(" "),a("td",[t._v("内核栈")]),t._v(" "),a("td",[t._v("内核栈")]),t._v(" "),a("td",[t._v("用户栈")])]),t._v(" "),a("tr",[a("td",[t._v("拥有资源")]),t._v(" "),a("td",[t._v("CPU资源、内存资源、文件资源和句柄等")]),t._v(" "),a("td",[t._v("程序计数器、寄存器、栈和状态字")]),t._v(" "),a("td",[t._v("拥有自己的寄存器上下文和栈")])]),t._v(" "),a("tr",[a("td",[t._v("并发性")]),t._v(" "),a("td",[t._v("不同进程之间切换实现并发，各自占有CPU实现并行")]),t._v(" "),a("td",[t._v("一个进程内部的多个线程并发执行")]),t._v(" "),a("td",[t._v("同一时间只能执行一个协程，而其他协程处于休眠状态，适合对任务进行分时处理")])]),t._v(" "),a("tr",[a("td",[t._v("系统开销")]),t._v(" "),a("td",[t._v("切换虚拟地址空间，切换内核栈和硬件上下文，CPU高速缓存失效、页表切换，开销很大")]),t._v(" "),a("td",[t._v("切换时只需保存和设置少量寄存器内容，因此开销很小")]),t._v(" "),a("td",[t._v("直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快")])]),t._v(" "),a("tr",[a("td",[t._v("通信方面")]),t._v(" "),a("td",[t._v("进程间通信需要借助操作系统")]),t._v(" "),a("td",[t._v("线程间可以直接读写进程数据段(如全局变量)来进行通信")]),t._v(" "),a("td",[t._v("共享内存、消息队列")])])])]),t._v(" "),a("p",[t._v("1、进程是资源分配的基本单位，运行一个可执行程序会创建一个或多个进程，进程就是运行起来的可执行程序")]),t._v(" "),a("p",[t._v("2、线程是资源调度的基本单位，也是程序执行的基本单位，是轻量级的进程。每个进程中都有唯一的主线程，且只能有一个，主线程和进程是相互依存的关系，主线程结束进程也会结束。多提一句：协程是用户态的轻量级线程，线程内部调度的基本单位")]),t._v(" "),a("p",{attrs:{id:"线程与进程的比较"}}),t._v(" "),a("h2",{attrs:{id:"_2、线程与进程的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程与进程的比较"}},[t._v("#")]),t._v(" 2、线程与进程的比较")]),t._v(" "),a("p",[t._v("1、线程启动速度快，轻量级")]),t._v(" "),a("p",[t._v("2、线程的系统开销小")]),t._v(" "),a("p",[t._v("3、线程使用有一定难度，需要处理数据一致性问题")]),t._v(" "),a("p",[t._v("4、同一线程共享的有堆、全局变量、静态变量、指针，引用、文件等，而独自占有栈")]),t._v(" "),a("h2",{attrs:{id:"_2-2、补充另一种问法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、补充另一种问法"}},[t._v("#")]),t._v(" 2.2、补充另一种问法")]),t._v(" "),a("p",[a("strong",[t._v("线程和进程的区别？")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("调度：线程是调度的基本单位（PC，状态码，通用寄存器，线程栈及栈指针）；进程是拥有资源的基本单位（打开文件，堆，静态区，代码段等）。")])]),t._v(" "),a("li",[a("p",[t._v("并发性：一个进程内多个线程可以并发（最好和CPU核数相等）；多个进程可以并发。")])]),t._v(" "),a("li",[a("p",[t._v("拥有资源：线程不拥有系统资源，但一个进程的多个线程可以共享隶属进程的资源；进程是拥有资源的独立单位。")])]),t._v(" "),a("li",[a("p",[t._v("系统开销：线程创建销毁只需要处理PC值，状态码，通用寄存器值，线程栈及栈指针即可；进程创建和销毁需要重新分配及销毁task_struct结构。")])])]),t._v(" "),a("p",{attrs:{id:"一个进程可以创建多少线程和什么有关"}}),t._v(" "),a("h2",{attrs:{id:"_3、一个进程可以创建多少线程-和什么有关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、一个进程可以创建多少线程-和什么有关"}},[t._v("#")]),t._v(" 3、一个进程可以创建多少线程，和什么有关？")]),t._v(" "),a("p",[t._v("这个要分不同系统去看：")]),t._v(" "),a("ul",[a("li",[t._v("如果是32 位系统，用户态的虚拟空间只有 3G，如果创建线程时分配的栈空间是 10M，那么一个进程最多只能创建 300 个左右的线程。")]),t._v(" "),a("li",[t._v("如果是64 位系统，用户态的虚拟空间大到有 128T，理论上不会受虚拟内存大小的限制，而会受系统的参数或性能限制。")])]),t._v(" "),a("p",[t._v("顺便多说一句，过多的线程将会导致大量的时间浪费在线程切换上，给程序运行效率带来负面影响，无用线程要及时销毁。")]),t._v(" "),a("p",{attrs:{id:"外中断和异常有什么区别"}}),t._v(" "),a("h2",{attrs:{id:"_4、外中断和异常有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、外中断和异常有什么区别"}},[t._v("#")]),t._v(" 4、外中断和异常有什么区别？")]),t._v(" "),a("p",[t._v("外中断是指由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。")]),t._v(" "),a("p",[t._v("而异常时由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。")]),t._v(" "),a("p",{attrs:{id:"进程线程模型你知道多少"}}),t._v(" "),a("h2",{attrs:{id:"_5、进程线程模型你知道多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、进程线程模型你知道多少"}},[t._v("#")]),t._v(" 5、进程线程模型你知道多少？")]),t._v(" "),a("p",[t._v("对于进程和线程的理解和把握可以说基本奠定了对系统的认知和把控能力。其核心意义绝不仅仅是“线程是调度的基本单位，进程是资源分配的基本单位”这么简单。")]),t._v(" "),a("h3",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),a("p",[t._v("我们这里讨论的是用户态的多线程模型，同一个进程内部有多个线程，所有的线程共享同一个进程的内存空间，进程中定义的全局变量会被所有的线程共享，比如有全局变量int i = 10，这一进程中所有并发运行的线程都可以读取和修改这个i的值，而多个线程被CPU调度的顺序又是不可控的，所以对临界资源的访问尤其需要注意安全。")]),t._v(" "),a("p",[t._v("我们必须知道，**做一次简单的i = i + 1在计算机中并不是原子操作，涉及内存取数，计算和写入内存几个环节，**而线程的切换有可能发生在上述任何一个环节中间，所以不同的操作顺序很有可能带来意想不到的结果。")]),t._v(" "),a("p",[t._v("但是，虽然线程在安全性方面会引入许多新挑战，但是线程带来的好处也是有目共睹的。首先，原先顺序执行的程序（暂时不考虑多进程）可以被拆分成几个独立的逻辑流，这些逻辑流可以独立完成一些任务（最好这些任务是不相关的）。")]),t._v(" "),a("p",[t._v("比如 QQ 可以一个线程处理聊天一个线程处理上传文件，两个线程互不干涉，在用户看来是同步在执行两个任务，试想如果线性完成这个任务的话，在数据传输完成之前用户聊天被一直阻塞会是多么尴尬的情况。")]),t._v(" "),a("p",[t._v("对于线程，我认为弄清以下两点非常重要：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("线程之间有无先后访问顺序（线程依赖关系）")])]),t._v(" "),a("li",[a("p",[t._v("多个线程共享访问同一变量（同步互斥问题）")])])]),t._v(" "),a("p",[t._v("另外，我们通常只会去说同一进程的多个线程共享进程的资源，但是每个线程特有的部分却很少提及，除了标识线程的tid，每个线程还有自己独立的栈空间，线程彼此之间是无法访问其他线程栈上内容的。")]),t._v(" "),a("p",[t._v("而作为处理机调度的最小单位，线程调度只需要保存线程栈、寄存器数据和PC即可，相比进程切换开销要小很多。")]),t._v(" "),a("p",[t._v("线程相关接口不少，主要需要了解各个参数意义和返回值意义。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("线程创建和结束")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("背景知识：")]),t._v(" "),a("p",[t._v("在一个文件内的多个函数通常都是按照main函数中出现的顺序来执行，但是在分时系统下，我们可以让每个函数都作为一个逻辑流并发执行，最简单的方式就是采用多线程策略。在main函数中调用多线程接口创建线程，每个线程对应特定的函数（操作），这样就可以不按照main函数中各个函数出现的顺序来执行，避免了忙等的情况。线程基本操作的接口如下。")])]),t._v(" "),a("li",[a("p",[t._v("相关接口：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建线程：int pthread_create(pthread_t *tidp,const pthread_attr_t *attr, void *("),a("em",[t._v("start_rtn)(void")]),t._v("),void *arg);")]),t._v(" "),a("p",[t._v("创建一个新线程，pthread和start_routine不可或缺，分别用于标识线程和执行体入口，其他可以填NULL。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("pthread：用来返回线程的tid，*pthread值即为tid，类型pthread_t == unsigned long int。")])]),t._v(" "),a("li",[a("p",[t._v("attr：指向线程属性结构体的指针，用于改变所创线程的属性，填NULL使用默认值。")])]),t._v(" "),a("li",[a("p",[t._v("start_routine：线程执行函数的首地址，传入函数指针。")])]),t._v(" "),a("li",[a("p",[t._v("arg：通过地址传递来传递函数参数，这里是无符号类型指针，可以传任意类型变量的地址，在被传入函数中先强制类型转换成所需类型即可。")])])])]),t._v(" "),a("li",[a("p",[t._v("获得线程ID：pthread_t pthread_self();")]),t._v(" "),a("p",[t._v("调用时，会打印线程ID。")])]),t._v(" "),a("li",[a("p",[t._v("等待线程结束：int pthread_join(pthread_t tid, void** retval);")]),t._v(" "),a("p",[t._v("主线程调用，等待子线程退出并回收其资源，类似于进程中wait/waitpid回收僵尸进程，调用pthread_join的线程会被阻塞。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("tid：创建线程时通过指针得到tid值。")])]),t._v(" "),a("li",[a("p",[t._v("retval：指向返回值的指针。")])])])]),t._v(" "),a("li",[a("p",[t._v("结束线程：pthread_exit(void *retval);")]),t._v(" "),a("p",[t._v("子线程执行，用来结束当前线程并通过retval传递返回值，该返回值可通过pthread_join获得。")]),t._v(" "),a("ul",[a("li",[t._v("retval：同上。")])])]),t._v(" "),a("li",[a("p",[t._v("分离线程：int pthread_detach(pthread_t tid);")]),t._v(" "),a("p",[t._v("主线程、子线程均可调用。主线程中pthread_detach(tid)，子线程中pthread_detach(pthread_self())，调用后和主线程分离，子线程结束时自己立即回收资源。")]),t._v(" "),a("ul",[a("li",[t._v("tid：同上。")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("线程属性值修改")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("背景知识：")]),t._v(" "),a("p",[t._v("线程属性对象类型为pthread_attr_t，结构体定义如下：")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" detachstate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程分离的状态")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" schedpolicy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程调度策略")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sched_param")]),t._v(" schedparam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程的调度参数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" inheritsched"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程的继承性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程的作用域")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下为线程栈的设置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" guardsize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程栈末尾警戒缓冲大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" stackaddr_set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程的栈设置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("    stackaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程栈的位置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" stacksize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程栈大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_attr_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相关接口：")]),t._v(" "),a("p",[t._v("对上述结构体中各参数大多有：pthread_attr_get()和pthread_attr_set()系统调用函数来设置和获取。这里不一一罗列。")])])]),t._v(" "),a("h3",{attrs:{id:"多进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程"}},[t._v("#")]),t._v(" 多进程")]),t._v(" "),a("p",[t._v("每一个进程是资源分配的基本单位。")]),t._v(" "),a("p",[t._v("进程结构由以下几个部分组成：代码段、堆栈段、数据段。代码段是静态的二进制代码，多个程序可以共享。")]),t._v(" "),a("p",[t._v("实际上在父进程创建子进程之后，父、子进程除了pid外，几乎所有的部分几乎一样。")]),t._v(" "),a("p",[t._v("父、子进程共享全部数据，但并不是说他们就是对同一块数据进行操作，子进程在读写数据时会通过写时复制机制将公共的数据重新拷贝一份，之后在拷贝出的数据上进行操作。")]),t._v(" "),a("p",[t._v("如果子进程想要运行自己的代码段，还可以通过调用execv()函数重新加载新的代码段，之后就和父进程独立开了。")]),t._v(" "),a("p",[t._v("我们在shell中执行程序就是通过shell进程先fork()一个子进程再通过execv()重新加载新的代码段的过程。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("进程创建与结束")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("背景知识：")]),t._v(" "),a("p",[t._v("进程有两种创建方式，一种是操作系统创建的一种是父进程创建的。从计算机启动到终端执行程序的过程为：0号进程 -> 1号内核进程 -> 1号用户进程(init进程) -> getty进程 -> shell进程 -> 命令行执行进程。所以我们在命令行中通过 ./program执行可执行文件时，所有创建的进程都是shell进程的子进程，这也就是为什么shell一关闭，在shell中执行的进程都自动被关闭的原因。从shell进程到创建其他子进程需要通过以下接口。")])]),t._v(" "),a("li",[a("p",[t._v("相关接口：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建进程：pid_t fork(void);")]),t._v(" "),a("p",[t._v("返回值：出错返回-1；父进程中返回pid > 0；子进程中pid == 0")])]),t._v(" "),a("li",[a("p",[t._v("结束进程：void exit(int status);")]),t._v(" "),a("ul",[a("li",[t._v("status是退出状态，保存在全局变量中S?，通常0表示正常退出。")])])]),t._v(" "),a("li",[a("p",[t._v("获得PID：pid_t getpid(void);")]),t._v(" "),a("p",[t._v("返回调用者pid。")])]),t._v(" "),a("li",[a("p",[t._v("获得父进程PID：pid_t getppid(void);")]),t._v(" "),a("p",[t._v("返回父进程pid。")])])])]),t._v(" "),a("li",[a("p",[t._v("其他补充：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("正常退出方式：exit()、_exit()、return（在main中）。")]),t._v(" "),a("p",[t._v("exit()和_exit()区别：exit()是对__exit()的封装，都会终止进程并做相关收尾工作，最主要的区别是_exit()函数关闭全部描述符和清理函数后不会刷新流，但是exit()会在调用_exit()函数前刷新数据流。")]),t._v(" "),a("p",[t._v("return和exit()区别：exit()是函数，但有参数，执行完之后控制权交给系统。return若是在调用函数中，执行完之后控制权交给调用进程，若是在main函数中，控制权交给系统。")])]),t._v(" "),a("li",[a("p",[t._v("异常退出方式：abort()、终止信号。")])])])])])]),t._v(" "),a("li",[a("p",[t._v("Linux进程控制")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("进程地址空间（地址空间）")]),t._v(" "),a("p",[t._v("虚拟存储器为每个进程提供了独占系统地址空间的假象。")]),t._v(" "),a("p",[t._v("尽管每个进程地址空间内容不尽相同，但是他们的都有相似的结构。X86 Linux进程的地址空间底部是保留给用户程序的，包括文本、数据、堆、栈等，其中文本区和数据区是通过存储器映射方式将磁盘中可执行文件的相应段映射至虚拟存储器地址空间中。")]),t._v(" "),a("p",[t._v('有一些"敏感"的地址需要注意下，对于32位进程来说，代码段从0x08048000开始。从0xC0000000开始到0xFFFFFFFF是内核地址空间，通常情况下代码运行在用户态（使用0x00000000 ~ 0xC00000000的用户地址空间），当发生系统调用、进程切换等操作时CPU控制寄存器设置模式位，进入内和模式，在该状态（超级用户模式）下进程可以访问全部存储器位置和执行全部指令。')]),t._v(" "),a("p",[t._v("也就说32位进程的地址空间都是4G，但用户态下只能访问低3G的地址空间，若要访问3G ~ 4G的地址空间则只有进入内核态才行。")])]),t._v(" "),a("li",[a("p",[t._v("进程控制块（处理机）")]),t._v(" "),a("p",[t._v("进程的调度实际就是内核选择相应的进程控制块，被选择的进程控制块中包含了一个进程基本的信息。")])]),t._v(" "),a("li",[a("p",[t._v("上下文切换")]),t._v(" "),a("p",[t._v("内核管理所有进程控制块，而进程控制块记录了进程全部状态信息。每一次进程调度就是一次上下文切换，所谓的上下文本质上就是当前运行状态，主要包括通用寄存器、浮点寄存器、状态寄存器、程序计数器、用户栈和内核数据结构（页表、进程表、文件表）等。")]),t._v(" "),a("p",[t._v("进程执行时刻，内核可以决定抢占当前进程并开始新的进程，这个过程由内核调度器完成，当调度器选择了某个进程时称为该进程被调度，该过程通过上下文切换来改变当前状态。")]),t._v(" "),a("p",[t._v("一次完整的上下文切换通常是进程原先运行于用户态，之后因系统调用或时间片到切换到内核态执行内核指令，完成上下文切换后回到用户态，此时已经切换到进程B。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("感谢网友勘误https://github.com/forthespada/InterviewGuide/issues/32，-2022.02.22")])]),t._v(" "),a("p",{attrs:{id:"进程调度算法你了解多少"}}),t._v(" "),a("h2",{attrs:{id:"_6、进程调度算法你了解多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、进程调度算法你了解多少"}},[t._v("#")]),t._v(" 6、进程调度算法你了解多少？")]),t._v(" "),a("h3",{attrs:{id:"_1、-先来先服务-first-come-first-serverd-fcfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-先来先服务-first-come-first-serverd-fcfs"}},[t._v("#")]),t._v(" 1、 "),a("strong",[t._v("先来先服务 first-come first-serverd（FCFS）")])]),t._v(" "),a("p",[t._v("非抢占式的调度算法，按照请求的顺序进行调度。")]),t._v(" "),a("p",[t._v("有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。")]),t._v(" "),a("h3",{attrs:{id:"_2、-短作业优先-shortest-job-first-sjf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-短作业优先-shortest-job-first-sjf"}},[t._v("#")]),t._v(" 2、 "),a("strong",[t._v("短作业优先 shortest job first（SJF）")])]),t._v(" "),a("p",[t._v("非抢占式的调度算法，按估计运行时间最短的顺序进行调度。")]),t._v(" "),a("p",[t._v("长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。")]),t._v(" "),a("h3",{attrs:{id:"_3、最短剩余时间优先-shortest-remaining-time-next-srtn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、最短剩余时间优先-shortest-remaining-time-next-srtn"}},[t._v("#")]),t._v(" 3、"),a("strong",[t._v("最短剩余时间优先 shortest remaining time next（SRTN）")])]),t._v(" "),a("p",[t._v("最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。")]),t._v(" "),a("p",[t._v("如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。")]),t._v(" "),a("h3",{attrs:{id:"_4、时间片轮转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、时间片轮转"}},[t._v("#")]),t._v(" 4、"),a("strong",[t._v("时间片轮转")])]),t._v(" "),a("p",[t._v("将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。")]),t._v(" "),a("p",[t._v("当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。")]),t._v(" "),a("p",[t._v("时间片轮转算法的效率和时间片的大小有很大关系：")]),t._v(" "),a("ul",[a("li",[t._v("因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。")]),t._v(" "),a("li",[t._v("而如果时间片过长，那么实时性就不能得到保证。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220000782.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_5、优先级调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、优先级调度"}},[t._v("#")]),t._v(" 5、"),a("strong",[t._v("优先级调度")])]),t._v(" "),a("p",[t._v("为每个进程分配一个优先级，按优先级进行调度。")]),t._v(" "),a("p",[t._v("为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。")]),t._v(" "),a("h3",{attrs:{id:"_6、多级反馈队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、多级反馈队列"}},[t._v("#")]),t._v(" 6、"),a("strong",[t._v("多级反馈队列")])]),t._v(" "),a("p",[t._v("一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。")]),t._v(" "),a("p",[t._v("多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。")]),t._v(" "),a("p",[t._v("这种方式下，之前的进程只需要交换 7 次。每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。")]),t._v(" "),a("p",[t._v("可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220000527.png",alt:""}})]),t._v(" "),a("p",{attrs:{id:"里牛客死下进程间通信方式"}}),t._v(" "),a("h2",{attrs:{id:"_7、linux下进程间通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、linux下进程间通信方式"}},[t._v("#")]),t._v(" 7、Linux下进程间通信方式？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("管道：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无名管道（内存文件）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程之间使用。进程的亲缘关系通常是指父子进程关系。")])]),t._v(" "),a("li",[a("p",[t._v("有名管道（FIFO文件，借助文件系统）：有名管道也是半双工的通信方式，但是允许在没有亲缘关系的进程之间使用，管道是先进先出的通信方式。")])])])]),t._v(" "),a("li",[a("p",[t._v("共享内存：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与信号量，配合使用来实现进程间的同步和通信。")])]),t._v(" "),a("li",[a("p",[t._v("消息队列：消息队列是有消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。")])]),t._v(" "),a("li",[a("p",[t._v("套接字：适用于不同机器间进程通信，在本地也可作为两个进程通信的方式。")])]),t._v(" "),a("li",[a("p",[t._v("信号：用于通知接收进程某个事件已经发生，比如按下ctrl + C就是信号。")])]),t._v(" "),a("li",[a("p",[t._v("信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，实现进程、线程的对临界区的同步及互斥访问。")])])]),t._v(" "),a("p",{attrs:{id:"李牛可爱下同步机制"}}),t._v(" "),a("h2",{attrs:{id:"_8、linux下同步机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、linux下同步机制"}},[t._v("#")]),t._v(" 8、Linux下同步机制？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("POSIX信号量：可用于进程同步，也可用于线程同步。")])]),t._v(" "),a("li",[a("p",[t._v("POSIX互斥锁 + 条件变量：只能用于线程同步。")])])]),t._v(" "),a("p",{attrs:{id:"如果系统中具有快表后那么地址的转换过程变成什么样了"}}),t._v(" "),a("h2",{attrs:{id:"_9、如果系统中具有快表后-那么地址的转换过程变成什么样了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、如果系统中具有快表后-那么地址的转换过程变成什么样了"}},[t._v("#")]),t._v(" 9、如果系统中具有快表后，那么地址的转换过程变成什么样了？")]),t._v(" "),a("blockquote",[a("p",[t._v("①CPU给出逻辑地址，由某个硬件算得页号、页内偏移量，将页号与快表中的所有页号进行比较。")]),t._v(" "),a("p",[t._v("②如果找到匹配的页号，说明要访问的页表项在快表中有副本，则直接从中取出该页对应的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此，若快表命中，则访问某个逻辑地址仅需一次访存即可。")]),t._v(" "),a("p",[t._v("③如果没有找到匹配的页号，则需要访问内存中的页表，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此,若快表未命中，则访问某个逻辑地址需要两次访存(注意:在找到页表项后，应同时将其存入快表,以便后面可能的再次访问。但若快表已满，则必须按照-定的算法对旧的页表项进行替换)")])]),t._v(" "),a("p",[t._v("由于查询快表的速度比查询页表的速度快很多，因此只要快表命中，就可以节省很多时间。\n因为局部性原理，–般来说快表的命中率可以达到90%以上。")]),t._v(" "),a("p",[t._v("例:某系统使用基本分页存储管理，并采用了具有快表的地址变换机构。访问一次快表耗时1us， 访问一次内存耗时100us。若快表的命中率为90%，那么访问一个逻辑地址的平均耗时是多少?\n(1+100) * 0.9 + (1+100+100) * 0.1 = 111 us\n有的系统支持快表和慢表同时查找，如果是这样，平均耗时应该是(1+100) * 0.9+ (100+100) *0.1=110.9 us\n若未采用快表机制，则访问一个逻辑地址需要100+100 = 200us\n显然，引入快表机制后，访问一个逻辑地址的速度快多了。")]),t._v(" "),a("p",{attrs:{id:"内存交换和覆盖有什么区别"}}),t._v(" "),a("h2",{attrs:{id:"_10、内存交换和覆盖有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、内存交换和覆盖有什么区别"}},[t._v("#")]),t._v(" 10、内存交换和覆盖有什么区别？")]),t._v(" "),a("p",[t._v("交换技术主要是在不同进程（或作业）之间进行，而覆盖则用于同一程序或进程中。")]),t._v(" "),a("p",{attrs:{id:"动态分区分配算法有哪几种可以分别说说吗"}}),t._v(" "),a("h2",{attrs:{id:"_11、动态分区分配算法有哪几种-可以分别说说吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、动态分区分配算法有哪几种-可以分别说说吗"}},[t._v("#")]),t._v(" 11、动态分区分配算法有哪几种？可以分别说说吗？")]),t._v(" "),a("h3",{attrs:{id:"_1、首次适应算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、首次适应算法"}},[t._v("#")]),t._v(" 1、首次适应算法")]),t._v(" "),a("p",[t._v("算法思想：每次都从低地址开始查找，找到第–个能满足大小的空闲分区。")]),t._v(" "),a("p",[t._v("如何实现：空闲分区以地址递增的次序排列。每次分配内存时顺序查找空闲分区链( 或空闲分[表)，找到大小能满足要求的第-一个空闲分区。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001798.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2、最佳适应算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、最佳适应算法"}},[t._v("#")]),t._v(" 2、最佳适应算法")]),t._v(" "),a("p",[t._v("算法思想:由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区,即，优先使用更小的空闲区。")]),t._v(" "),a("p",[t._v("如何实现:空闲分区按容量递增次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第-一个空闲分区。\n"),a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001901.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3、最坏适应算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、最坏适应算法"}},[t._v("#")]),t._v(" 3、最坏适应算法")]),t._v(" "),a("p",[t._v("又称最大适应算法(Largest Fit)")]),t._v(" "),a("p",[t._v("算法思想:为了解决最佳适应算法的问题—即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。")]),t._v(" "),a("p",[t._v("如何实现:空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第-一个空闲分区。\n"),a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001434.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_4、邻近适应算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、邻近适应算法"}},[t._v("#")]),t._v(" 4、邻近适应算法")]),t._v(" "),a("p",[t._v("算法思想：首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查找结束的位置开始检索，就能解决上述问题。")]),t._v(" "),a("p",[t._v("如何实现：空闲分区以地址递增的顺序排列(可排成-一个循环链表)。每次分配内存时从上次查找结束的位置开始查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。\n"),a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001500.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"_5、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、总结"}},[t._v("#")]),t._v(" 5、总结")]),t._v(" "),a("p",[t._v("首次适应不仅最简单，通常也是最好最快，不过首次适应算法会使得内存低地址部分出现很多小的空闲分区，而每次查找都要经过这些分区，因此也增加了查找的开销。邻近算法试图解决这个问题，但实际上，它常常会导致在内存的末尾分配空间分裂成小的碎片，它通常比首次适应算法结果要差。")]),t._v(" "),a("p",[t._v("最佳导致大量碎片，最坏导致没有大的空间。")]),t._v(" "),a("p",[t._v("进过实验，首次适应比最佳适应要好，他们都比最坏好。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("算法")]),t._v(" "),a("th",[t._v("算法思想")]),t._v(" "),a("th",[t._v("分区排列顺序")]),t._v(" "),a("th",[t._v("优点")]),t._v(" "),a("th",[t._v("缺点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("首次适应")]),t._v(" "),a("td",[t._v("从头到尾找适合的分区")]),t._v(" "),a("td",[t._v("空闲分区以地址递增次序排列")]),t._v(" "),a("td",[t._v("综合看性能最好。"),a("strong",[t._v("算法开销小")]),t._v("，回收分区后一.般不需要对空闲分区队列重新排序")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("最佳适应")]),t._v(" "),a("td",[t._v("优先使用更小的分区，以保留更多大分区")]),t._v(" "),a("td",[t._v("空闲分区以容量递增次序排列")]),t._v(" "),a("td",[t._v("会有更多的大分区被保留下来，更能满足大进程需求")]),t._v(" "),a("td",[t._v("会产生很多太小的、难以利用的碎片;"),a("strong",[t._v("算法开销大")]),t._v("，回收分区后可能需要对空闲分区队列重新排序")])]),t._v(" "),a("tr",[a("td",[t._v("最坏适应")]),t._v(" "),a("td",[t._v("优先使用更大的分区，以防止产生太小的不可用的碎片")]),t._v(" "),a("td",[t._v("空闲分区以容量递减次序排列")]),t._v(" "),a("td",[t._v("可以减少难以利用的小碎片")]),t._v(" "),a("td",[t._v("大分区容易被用完，不利于大进程;"),a("strong",[t._v("算法开销大")]),t._v("(原因同上)")])]),t._v(" "),a("tr",[a("td",[t._v("邻近适应")]),t._v(" "),a("td",[t._v("由首次适应演变而来，每次从上次查找结束位置开始查找")]),t._v(" "),a("td",[t._v("空闲分区以地址递增次序排列(可排列成循环链表)")]),t._v(" "),a("td",[t._v("不用每次都从低地址的小分区开始检索。"),a("strong",[t._v("算法开销小")]),t._v("(原因同首次适应算法)")]),t._v(" "),a("td",[t._v("会使高地址的大分区也被用完")])])])]),t._v(" "),a("p",{attrs:{id:"虚拟技术你了解吗"}}),t._v(" "),a("h2",{attrs:{id:"_12、虚拟技术你了解吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、虚拟技术你了解吗"}},[t._v("#")]),t._v(" 12、虚拟技术你了解吗？")]),t._v(" "),a("p",[t._v("虚拟技术把一个物理实体转换为多个逻辑实体。")]),t._v(" "),a("p",[t._v("主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。")]),t._v(" "),a("p",[t._v("多进程与多线程：多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。")]),t._v(" "),a("p",[t._v("虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。")]),t._v(" "),a("p",{attrs:{id:"进程状态的切换你知道多少"}}),t._v(" "),a("h2",{attrs:{id:"_13、进程状态的切换你知道多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、进程状态的切换你知道多少"}},[t._v("#")]),t._v(" 13、进程状态的切换你知道多少？")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001439.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("就绪状态（ready）：等待被调度")]),t._v(" "),a("li",[t._v("运行状态（running）")]),t._v(" "),a("li",[t._v("阻塞状态（waiting）：等待资源")])]),t._v(" "),a("p",[t._v("应该注意以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。")]),t._v(" "),a("li",[t._v("阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("感谢微信好友“Beautiful”指出配图文字笔误，已改正，感谢！-2021.05.31")])]),t._v(" "),a("p",{attrs:{id:"一个C/C++程序从开始编译到生成可执行文件的完整过程你能说出来多少"}}),t._v(" "),a("h2",{attrs:{id:"_14、一个c-c-程序从开始编译到生成可执行文件的完整过程-你能说出来多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、一个c-c-程序从开始编译到生成可执行文件的完整过程-你能说出来多少"}},[t._v("#")]),t._v(" 14、一个C/C++程序从开始编译到生成可执行文件的完整过程，你能说出来多少？")]),t._v(" "),a("p",[t._v("四个过程：")]),t._v(" "),a("p",[a("strong",[t._v("（1）预编译")]),t._v("\n主要处理源代码文件中的以“#”开头的预编译指令。处理规则见下")]),t._v(" "),a("p",[t._v("1、删除所有的#define，展开所有的宏定义。")]),t._v(" "),a("p",[t._v("2、处理所有的条件预编译指令，如“#if”、“#endif”、“#ifdef”、“#elif”和“#else”。")]),t._v(" "),a("p",[t._v("3、处理“#include”预编译指令，将文件内容替换到它的位置，这个过程是递归进行的，文件中包含其他\n文件。")]),t._v(" "),a("p",[t._v("4、删除所有的注释，“//”和“/**/”。")]),t._v(" "),a("p",[t._v("5、保留所有的#pragma 编译器指令，编译器需要用到他们，如：#pragma once 是为了防止有文件被重\n复引用。")]),t._v(" "),a("p",[t._v("6、添加行号和文件标识，便于编译时编译器产生调试用的行号信息，和编译时产生编译错误或警告是\n能够显示行号。")]),t._v(" "),a("p",[a("strong",[t._v("（2）编译")]),t._v("\n把预编译之后生成的xxx.i或xxx.ii文件，进行一系列词法分析、语法分析、语义分析及优化后，生成相应的汇编代码文件。")]),t._v(" "),a("p",[t._v("1、词法分析：利用类似于“有限状态机”的算法，将源代码程序输入到扫描机中，将其中的字符序列分割成一系列的记号。")]),t._v(" "),a("p",[t._v("2、语法分析：语法分析器对由扫描器产生的记号，进行语法分析，产生语法树。由语法分析器输出的语法树是一种以表达式为节点的树。")]),t._v(" "),a("p",[t._v("3、语义分析：语法分析器只是完成了对表达式语法层面的分析，语义分析器则对表达式是否有意义进行判断，其分析的语义是静态语义——在编译期能分期的语义，相对应的动态语义是在运行期才能确定的语义。")]),t._v(" "),a("p",[t._v("4、优化：源代码级别的一个优化过程。")]),t._v(" "),a("p",[t._v("5、目标代码生成：由代码生成器将中间代码转换成目标机器代码，生成一系列的代码序列——汇编语言表示。")]),t._v(" "),a("p",[t._v("6、目标代码优化：目标代码优化器对上述的目标机器代码进行优化：寻找合适的寻址方式、使用位移来替代乘法运算、删除多余的指令等。")]),t._v(" "),a("p",[a("strong",[t._v("（3）汇编")])]),t._v(" "),a("p",[t._v("将汇编代码转变成机器可以执行的指令(机器码文件)。 汇编器的汇编过程相对于编译器来说更简单，没有复杂的语法，也没有语义，更不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译过来，汇编过程有汇编器as完成。")]),t._v(" "),a("p",[t._v("经汇编之后，产生目标文件(与可执行文件格式几乎一样)xxx.o(Linux下)、xxx.obj(Windows下)。")]),t._v(" "),a("p",[a("strong",[t._v("（4）链接")])]),t._v(" "),a("p",[t._v("将不同的源文件产生的目标文件进行链接，从而形成一个可以执行的程序。链接分为静态链接和动态链接：")]),t._v(" "),a("p",[a("strong",[t._v("1、静态链接：")]),t._v("\n函数和数据被编译进一个二进制文件。在使用静态库的情况下，在编译链接可执行文件时，链接器从库中复制这些函数和数据并把它们和应用程序的其它模块组合起来创建最终的可执行文件。\n空间浪费：因为每个可执行程序中对所有需要的目标文件都要有一份副本，所以如果多个程序对同一个目标文件都有依赖，会出现同一个目标文件都在内存存在多个副本；\n更新困难：每当库函数的代码修改了，这个时候就需要重新进行编译链接形成可执行程序。")]),t._v(" "),a("p",[t._v("运行速度快：但是静态链接的优点就是，在可执行程序中已经具备了所有执行程序所需要的任何东西，在执行的时候运行速度快。")]),t._v(" "),a("p",[a("strong",[t._v("2、动态链接：")]),t._v("\n动态链接的基本思想是把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。")]),t._v(" "),a("p",[t._v("共享库：就是即使需要每个程序都依赖同一个库，但是该库不会像静态链接那样在内存中存在多份副本，而是这多个程序在执行时共享同一份副本；")]),t._v(" "),a("p",[t._v("更新方便：更新时只需要替换原来的目标文件，而无需将所有的程序再重新链接一遍。当程序下一次运行时，新版本的目标文件会被自动加载到内存并且链接起来，程序就完成了升级的目标。")]),t._v(" "),a("p",[t._v("性能损耗：因为把链接推迟到了程序运行时，所以每次执行程序都需要进行链接，所以性能会有一定损失。")]),t._v(" "),a("p",{attrs:{id:"通过例子讲解逻辑地址转换为物理地址的基本过程"}}),t._v(" "),a("h2",{attrs:{id:"_15、通过例子讲解逻辑地址转换为物理地址的基本过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、通过例子讲解逻辑地址转换为物理地址的基本过程"}},[t._v("#")]),t._v(" 15、通过例子讲解逻辑地址转换为物理地址的基本过程")]),t._v(" "),a("p",[t._v("可以借助进程的页表将逻辑地址转换为物理地址。")]),t._v(" "),a("p",[t._v("通常会在系统中设置一个页表寄存器(PTR)，存放页表在内存中的起始地址F和页表长度M。进程未执行时，页表的始址和页表长度放在进程控制块(PCB) 中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。")]),t._v(" "),a("p",[t._v("注意:页面大小是2的整数幂\n设页面大小为L，逻辑地址A到物理地址E的变换过程如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001941.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001638.png",alt:""}}),t._v("\n例:若页面大小L为1K字节，页号2对应的内存块号b=8，将逻辑地址A=2500转换为物理地址E。\n等价描述：某系统按字节寻址，逻辑地址结构中，页内偏移量占10位(说明一个页面的大小为2^10B = 1KB)，页号2对应的内存块号 b=8，将逻辑地址A=2500转换为物理地址E。")]),t._v(" "),a("blockquote",[a("p",[t._v("①计算页号、页内偏移量\n页号P=A/L = 2500/1024 = 2; 页内偏移量W= A%L = 2500%1024 = 452")]),t._v(" "),a("p",[t._v("②根据题中条件可知，页号2没有越界，其存放的内存块号b=8")]),t._v(" "),a("p",[t._v("③物理地址E=b*L+W=8 * 1024+ 425 = 8644")]),t._v(" "),a("p",[t._v("在分页存储管理(页式管理)的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了。因此，页式管理中地址是-维的。即，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，并不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位。")])]),t._v(" "),a("p",{attrs:{id:"进程同步的四种方法"}}),t._v(" "),a("h2",{attrs:{id:"_16、进程同步的四种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、进程同步的四种方法"}},[t._v("#")]),t._v(" 16、进程同步的四种方法？")]),t._v(" "),a("h3",{attrs:{id:"_1-临界区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-临界区"}},[t._v("#")]),t._v(" 1. 临界区")]),t._v(" "),a("p",[t._v("对临界资源进行访问的那段代码称为临界区。")]),t._v(" "),a("p",[t._v("为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("// entry section\n// critical section;\n// exit section\n")])])]),a("h3",{attrs:{id:"_2-同步与互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-同步与互斥"}},[t._v("#")]),t._v(" 2. 同步与互斥")]),t._v(" "),a("ul",[a("li",[t._v("同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。")]),t._v(" "),a("li",[t._v("互斥：多个进程在同一时刻只有一个进程能进入临界区。")])]),t._v(" "),a("h3",{attrs:{id:"_3-信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-信号量"}},[t._v("#")]),t._v(" 3. 信号量")]),t._v(" "),a("p",[t._v("信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("down")]),t._v("   : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；")]),t._v(" "),a("li",[a("strong",[t._v("up")]),t._v("  ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。")])]),t._v(" "),a("p",[t._v("down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。")]),t._v(" "),a("p",[t._v("如果信号量的取值只能为 0 或者 1，那么就成为了   "),a("strong",[t._v("互斥量（Mutex）")]),t._v("  ，0 表示临界区已经加锁，1 表示临界区解锁。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("P2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临界区")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("font",{attrs:{size:"3"}},[a("strong",[t._v("使用信号量实现生产者-消费者问题")])]),t._v(" "),a("br")],1),t._v(" "),a("p",[t._v("问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。")]),t._v(" "),a("p",[t._v("因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。")]),t._v(" "),a("p",[t._v("为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量：empty 记录空缓冲区的数量，full 记录满缓冲区的数量。")]),t._v(" "),a("p",[t._v("其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。")]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。")]),t._v(" "),a("p",[t._v("消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行 up(empty) 操作，empty 永远都为 0，导致生产者永远等待下，不会释放锁，消费者因此也会永远等待下去。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore empty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsemaphore full "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("producer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TRUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("produce_item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert_item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consumer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TRUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("down")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove_item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consume_item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-管程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-管程"}},[t._v("#")]),t._v(" 4. 管程")]),t._v(" "),a("p",[t._v("使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。")]),t._v(" "),a("p",[t._v("c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。")]),t._v(" "),a("div",{staticClass:"language-pascal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-pascal"}},[a("code",[t._v("monitor ProducerConsumer\n    integer i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    condition c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("procedure")]),t._v(" insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("procedure")]),t._v(" remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v(" monitor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。")]),t._v(" "),a("p",[t._v("管程引入了   "),a("strong",[t._v("条件变量")]),t._v("   以及相关的操作："),a("strong",[t._v("wait()")]),t._v(" 和 "),a("strong",[t._v("signal()")]),t._v(" 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。")]),t._v(" "),a("p",[a("font",{attrs:{size:"3"}},[a("strong",[t._v("使用管程实现生产者-消费者问题")])]),a("br")],1),t._v(" "),a("div",{staticClass:"language-pascal extra-class"},[a("pre",{pre:!0,attrs:{class:"language-pascal"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 管程")]),t._v("\nmonitor ProducerConsumer\n    condition full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    integer count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    condition c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("procedure")]),t._v(" insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        insert_item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        remove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" remove_item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v(" monitor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产者客户端")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("procedure")]),t._v(" producer\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" produce_item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ProducerConsumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消费者客户端")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("procedure")]),t._v(" consumer\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n        item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ProducerConsumer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        consume_item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",{attrs:{id:"操作系统在对内存进行管理的时候需要做些什么"}}),t._v(" "),a("h2",{attrs:{id:"_17、操作系统在对内存进行管理的时候需要做些什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、操作系统在对内存进行管理的时候需要做些什么"}},[t._v("#")]),t._v(" 17、操作系统在对内存进行管理的时候需要做些什么?")]),t._v(" "),a("ul",[a("li",[t._v("操作系统负责内存空间的分配与回收。")]),t._v(" "),a("li",[t._v("操作系统需要提供某种技术从逻辑上对内存空间进行扩充。")]),t._v(" "),a("li",[t._v("操作系统需要提供地址转换功能，负责程序的逻辑地址与物理地址的转换。")]),t._v(" "),a("li",[t._v("操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，互不干扰")])]),t._v(" "),a("p",{attrs:{id:"进程通信方法下线程通信方法里牛客死下"}}),t._v(" "),a("h2",{attrs:{id:"_18、进程通信方法-linux和windows下-线程通信方法-linux和windows下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、进程通信方法-linux和windows下-线程通信方法-linux和windows下"}},[t._v("#")]),t._v(" 18、进程通信方法（Linux和windows下），线程通信方法（Linux和windows下）")]),t._v(" "),a("p",[a("strong",[t._v("进程通信方法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001927.png",alt:""}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称及方式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("管道(pipe)：允许一个进程和另一个与它有共同祖先的进程之间进行通信")])]),t._v(" "),a("tr",[a("td",[t._v("命名管道(FIFO)：类似于管道，但是它可以用于任何两个进程之间的通信，命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建")])]),t._v(" "),a("tr",[a("td",[t._v("消息队列(MQ)：消息队列是消息的连接表，包括POSIX消息对和System V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能成该无格式字节流以及缓冲区大小受限等缺点；")])]),t._v(" "),a("tr",[a("td",[t._v("信号量(semaphore)：信号量主要作为进程间以及同进程不同线程之间的同步手段；")])]),t._v(" "),a("tr",[a("td",[t._v("共享内存(shared memory)：它使得多个进程可以访问同一块内存空间，**是最快的可用IPC形式。**这是针对其他通信机制运行效率较低而设计的。它往往与其他通信机制，如信号量结合使用，以达到进程间的同步及互斥")])]),t._v(" "),a("tr",[a("td",[t._v("信号(signal)：信号是比较复杂的通信方式，用于通知接收进程有某种事情发生，除了用于进程间通信外，进程还可以发送信号给进程本身")])]),t._v(" "),a("tr",[a("td",[t._v("内存映射(mapped memory)：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它")])]),t._v(" "),a("tr",[a("td",[t._v("Socket：它是更为通用的进程间通信机制，可用于不同机器之间的进程间通信")])])])]),t._v(" "),a("p",[a("strong",[t._v("线程通信方法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001656.png",alt:""}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称及含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("Linux：")])])]),t._v(" "),a("tr",[a("td",[t._v("信号：类似进程间的信号处理")])]),t._v(" "),a("tr",[a("td",[t._v("锁机制：互斥锁、读写锁和自旋锁")])]),t._v(" "),a("tr",[a("td",[t._v("条件变量：使用通知的方式解锁，与互斥锁配合使用")])]),t._v(" "),a("tr",[a("td",[t._v("信号量：包括无名线程信号量和命名线程信号量")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("Windows：")])])]),t._v(" "),a("tr",[a("td",[t._v("全局变量：需要有多个线程来访问一个全局变量时，通常我们会在这个全局变量前加上volatile声明，以防编译器对此变量进行优化")])]),t._v(" "),a("tr",[a("td",[t._v("Message消息机制：常用的Message通信的接口主要有两个：PostMessage和PostThreadMessage，PostMessage为线程向主窗口发送消息。而PostThreadMessage是任意两个线程之间的通信接口。")])]),t._v(" "),a("tr",[a("td",[t._v("CEvent对象：CEvent为MFC中的一个对象，可以通过对CEvent的触发状态进行改变，从而实现线程间的通信和同步，这个主要是实现线程直接同步的一种方法。")])])])]),t._v(" "),a("p",{attrs:{id:"进程间通信有哪几种方式把你知道的都说出来"}}),t._v(" "),a("h2",{attrs:{id:"_19、进程间通信有哪几种方式-把你知道的都说出来"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、进程间通信有哪几种方式-把你知道的都说出来"}},[t._v("#")]),t._v(" 19、进程间通信有哪几种方式？把你知道的都说出来")]),t._v(" "),a("p",[t._v("Linux几乎支持全部UNIX进程间通信方法，包括管道（有名管道和无名管道）、消息队列、共享内存、信号量和套接字。其中前四个属于同一台机器下进程间的通信，套接字则是用于网络通信。")]),t._v(" "),a("h3",{attrs:{id:"管道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[t._v("#")]),t._v(" 管道")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无名管道")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无名管道特点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无名管道是一种特殊的文件，这种文件只存在于内存中。")])]),t._v(" "),a("li",[a("p",[t._v("无名管道只能用于父子进程或兄弟进程之间，必须用于具有亲缘关系的进程间的通信。")])]),t._v(" "),a("li",[a("p",[t._v("无名管道只能由一端向另一端发送数据，是半双工方式，如果双方需要同时收发数据需要两个管道。")])])])]),t._v(" "),a("li",[a("p",[t._v("相关接口：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("int pipe(int fd[2]);")]),t._v(" "),a("ul",[a("li",[t._v("fd[2]：管道两端用fd[0]和fd[1]来描述，读的一端用fd[0]表示，写的一端用fd[1]表示。通信双方的进程中写数据的一方需要把fd[0]先close掉，读的一方需要先把fd[1]给close掉。")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("有名管道：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("有名管道特点：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("有名管道是FIFO文件，存在于文件系统中，可以通过文件路径名来指出。")])]),t._v(" "),a("li",[a("p",[t._v("有名管道可以在不具有亲缘关系的进程间进行通信。")])])])]),t._v(" "),a("li",[a("p",[t._v("相关接口：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("int mkfifo(const char *pathname, mode_t mode);")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("pathname：即将创建的FIFO文件路径，如果文件存在需要先删除。")])]),t._v(" "),a("li",[a("p",[t._v("mode：和open()中的参数相同。")])])])])])])])])]),t._v(" "),a("h3",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),a("p",[t._v("相比于 FIFO，消息队列具有以下优点：")]),t._v(" "),a("ul",[a("li",[t._v("消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难；")]),t._v(" "),a("li",[t._v("避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；")]),t._v(" "),a("li",[t._v("读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。")])]),t._v(" "),a("h3",{attrs:{id:"共享内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享内存"}},[t._v("#")]),t._v(" 共享内存")]),t._v(" "),a("p",[t._v("进程可以将同一段共享内存连接到它们自己的地址空间，所有进程都可以访问共享内存中的地址，如果某个进程向共享内存内写入数据，所做的改动将立即影响到可以访问该共享内存的其他所有进程。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相关接口")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建共享内存：int shmget(key_t key, int size, int flag);")]),t._v(" "),a("p",[t._v("成功时返回一个和key相关的共享内存标识符，失败范湖范围-1。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("key：为共享内存段命名，多个共享同一片内存的进程使用同一个key。")])]),t._v(" "),a("li",[a("p",[t._v("size：共享内存容量。")])]),t._v(" "),a("li",[a("p",[t._v("flag：权限标志位，和open的mode参数一样。")])])])]),t._v(" "),a("li",[a("p",[t._v("连接到共享内存地址空间：void *shmat(int shmid, void *addr, int flag);")]),t._v(" "),a("p",[t._v("返回值即共享内存实际地址。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("shmid：shmget()返回的标识。")])]),t._v(" "),a("li",[a("p",[t._v("addr：决定以什么方式连接地址。")])]),t._v(" "),a("li",[a("p",[t._v("flag：访问模式。")])])])]),t._v(" "),a("li",[a("p",[t._v("从共享内存分离：int shmdt(const void *shmaddr);")]),t._v(" "),a("p",[t._v("调用成功返回0，失败返回-1。")]),t._v(" "),a("ul",[a("li",[t._v("shmaddr：是shmat()返回的地址指针。")])])])])]),t._v(" "),a("li",[a("p",[t._v("其他补充")]),t._v(" "),a("p",[t._v("共享内存的方式像极了多线程中线程对全局变量的访问，大家都对等地有权去修改这块内存的值，这就导致在多进程并发下，最终结果是不可预期的。所以对这块临界区的访问需要通过信号量来进行进程同步。")]),t._v(" "),a("p",[t._v("但共享内存的优势也很明显，首先可以通过共享内存进行通信的进程不需要像无名管道一样需要通信的进程间有亲缘关系。其次内存共享的速度也比较快，不存在读取文件、消息传递等过程，只需要到相应映射到的内存地址直接读写数据即可。")])])]),t._v(" "),a("h3",{attrs:{id:"信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量"}},[t._v("#")]),t._v(" 信号量")]),t._v(" "),a("p",[t._v("在提到共享内存方式时也提到，进程共享内存和多线程共享全局变量非常相似。所以在使用内存共享的方式是也需要通过信号量来完成进程间同步。多线程同步的信号量是POSIX信号量，而在进程里使用SYSTEM  V信号量。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相关接口")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建信号量：int semget(key_t key, int nsems, int semflag);")]),t._v(" "),a("p",[t._v("创建成功返回信号量标识符，失败返回-1。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("key：进程pid。")])]),t._v(" "),a("li",[a("p",[t._v("nsems：创建信号量的个数。")])]),t._v(" "),a("li",[a("p",[t._v("semflag：指定信号量读写权限。")])])])]),t._v(" "),a("li",[a("p",[t._v("改变信号量值：int semop(int semid, struct sembuf *sops, unsigned nsops);")]),t._v(" "),a("p",[t._v("我们所需要做的主要工作就是串讲sembuf变量并设置其值，然后调用semop，把设置好的sembuf变量传递进去。")]),t._v(" "),a("p",[t._v("struct sembuf结构体定义如下：")]),t._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct sembuf{\n    short sem_num;\n    short sem_op;\n    short sem_flg;\n};\n")])])]),a("p",[t._v("成功返回信号量标识符，失败返回-1。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("semid：信号量集标识符，由semget()函数返回。")])]),t._v(" "),a("li",[a("p",[t._v("sops：指向struct sembuf结构的指针，先设置好sembuf值再通过指针传递。")])]),t._v(" "),a("li",[a("p",[t._v("nsops：进行操作信号量的个数，即sops结构变量的个数，需大于或等于1。最常见设置此值等于1，只完成对一个信号量的操作。")])])])]),t._v(" "),a("li",[a("p",[t._v("直接控制信号量信息：int semctl(int semid, int semnum, int cmd, union semun arg);")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("semid：信号量集标识符。")])]),t._v(" "),a("li",[a("p",[t._v("semnum：信号量集数组上的下标，表示某一个信号量。")])]),t._v(" "),a("li",[a("p",[t._v("arg：union semun类型。")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"辅助命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#辅助命令"}},[t._v("#")]),t._v(" 辅助命令")]),t._v(" "),a("p",[t._v("ipcs命令用于报告共享内存、信号量和消息队列信息。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("ipcs -a：列出共享内存、信号量和消息队列信息。")])]),t._v(" "),a("li",[a("p",[t._v("ipcs -l：列出系统限额。")])]),t._v(" "),a("li",[a("p",[t._v("ipcs -u：列出当前使用情况。")])])]),t._v(" "),a("h3",{attrs:{id:"套接字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套接字"}},[t._v("#")]),t._v(" 套接字")]),t._v(" "),a("p",[t._v("与其它通信机制不同的是，它可用于不同机器间的进程通信。")]),t._v(" "),a("p",{attrs:{id:"虚拟内存的目的是什么"}}),t._v(" "),a("h2",{attrs:{id:"_20、虚拟内存的目的是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20、虚拟内存的目的是什么"}},[t._v("#")]),t._v(" 20、虚拟内存的目的是什么？")]),t._v(" "),a("p",[t._v("虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。")]),t._v(" "),a("p",[t._v("为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。")]),t._v(" "),a("p",[t._v("这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。")]),t._v(" "),a("p",[t._v("从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。")]),t._v(" "),a("p",[t._v("例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220001833.png",alt:""}})])])}),[],!1,null,null,null);s.default=v.exports}}]);
