(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{440:function(t,a,s){"use strict";s.r(a);var n=s(62),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{align:"center"}},[t._v("C++之基础语法")]),t._v(" "),s("p",{attrs:{id:"在main执行之前和之后执行的代码可能是什么"}}),t._v(" "),s("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[s("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),s("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),s("p",[t._v("2、👉23年5月份阿秀从"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),s("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),s("div",{attrs:{align:"center"}}),t._v("网站地址："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),s("p"),t._v("3、😊\n    分享一个学弟发给我的"),s("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),s("p"),t._v(" "),s("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),s("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),s("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),s("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),s("p",{attrs:{id:"说一下你理解的ifdefendif代表着什么"}}),s("p"),t._v(" "),s("h2",{attrs:{id:"_101、程序在执行int-main-int-argc-char-argv-时的内存结构-你了解吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_101、程序在执行int-main-int-argc-char-argv-时的内存结构-你了解吗"}},[t._v("#")]),t._v(" 101、程序在执行int main(int argc, char *argv[])时的内存结构，你了解吗？")]),t._v(" "),s("p",[t._v("参数的含义是程序在命令行下运行的时候，需要输入argc 个参数，每个参数是以char 类型输入的，依次存在数组里面，数组是 argv[]，所有的参数在指针")]),t._v(" "),s("p",[t._v("char * 指向的内存中，数组的中元素的个数为 argc 个，第一个参数为程序的名称。")]),t._v(" "),s("p",{attrs:{id:"volatile关键字的作用"}}),t._v(" "),s("h2",{attrs:{id:"_102、volatile关键字的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_102、volatile关键字的作用"}},[t._v("#")]),t._v(" 102、volatile关键字的作用？")]),t._v(" "),s("p",[t._v("volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。")]),t._v(" "),s("p",[t._v("volatile用在如下的几个地方：")]),t._v(" "),s("ol",[s("li",[t._v("中断服务程序中修改的供其它程序检测的变量需要加volatile；")]),t._v(" "),s("li",[t._v("多任务环境下各任务间共享的标志应该加volatile；")]),t._v(" "),s("li",[t._v("存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能由不同意义；")])]),t._v(" "),s("p",{attrs:{id:"如果有一个空类它会默认添加哪些函数"}}),t._v(" "),s("h2",{attrs:{id:"_103、如果有一个空类-它会默认添加哪些函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_103、如果有一个空类-它会默认添加哪些函数"}},[t._v("#")]),t._v(" 103、如果有一个空类，它会默认添加哪些函数？")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缺省构造函数//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝构造函数//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  Empty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值运算符//")]),t._v("\n")])])]),s("p",{attrs:{id:"西加加中标准库是什么"}}),t._v(" "),s("h2",{attrs:{id:"_104、c-中标准库是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_104、c-中标准库是什么"}},[t._v("#")]),t._v(" 104、C++中标准库是什么？")]),t._v(" "),s("ol",[s("li",[t._v("C++ 标准库可以分为两部分：")])]),t._v(" "),s("p",[t._v("标准函数库： 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。")]),t._v(" "),s("p",[t._v("面向对象类库： 这个库是类及其相关函数的集合。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("输入/输出 I/O、字符串和字符处理、数学、时间、日期和本地化、动态分配、其他、宽字符函数")])]),t._v(" "),s("li",[s("p",[t._v("标准的 C++ I/O 类、String 类、数值类、STL 容器类、STL 算法、STL 函数对象、STL 迭代器、STL 分配器、本地化库、异常处理类、杂项支持库")])])]),t._v(" "),s("p",{attrs:{id:"你知道之间的关系是什么吗"}}),t._v(" "),s("h2",{attrs:{id:"_105、你知道const-char-与string之间的关系是什么吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_105、你知道const-char-与string之间的关系是什么吗"}},[t._v("#")]),t._v(" 105、你知道const char* 与string之间的关系是什么吗？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("string 是c++标准库里面其中一个，封装了对字符串的操作，实际操作过程我们可以用const char*给string类初始化")])]),t._v(" "),s("li",[s("p",[t._v("三者的转化关系如下所示：")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  string转"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n\nstring s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 转string，直接赋值即可 \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c_s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c_s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  string 转"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n string s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\nd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 转string \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n string "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\ne"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 转"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cpc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" 转"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("，直接赋值即可 \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “abc”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cpc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",{attrs:{id:"你什么情况用指针当参数，什么时候用引用，为什么"}}),t._v(" "),s("h2",{attrs:{id:"_106、你什么情况用指针当参数-什么时候用引用-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_106、你什么情况用指针当参数-什么时候用引用-为什么"}},[t._v("#")]),t._v(" 106、你什么情况用指针当参数，什么时候用引用，为什么？")]),t._v(" "),s("ol",[s("li",[t._v("使用引用参数的主要原因有两个：")])]),t._v(" "),s("p",[t._v("程序员能修改调用函数中的数据对象")]),t._v(" "),s("p",[t._v("通过传递引用而不是整个数据–对象，可以提高程序的运行速度")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("一般的原则：\n对于使用引用的值而不做修改的函数：")])]),t._v(" "),s("p",[t._v("如果数据对象很小，如内置数据类型或者小型结构，则按照值传递；")]),t._v(" "),s("p",[t._v("如果数据对象是数组，则使用指针（唯一的选择），并且指针声明为指向const的指针；")]),t._v(" "),s("p",[t._v("如果数据对象是较大的结构，则使用const指针或者引用，已提高程序的效率。这样可以节省结构所需的时间和空间；")]),t._v(" "),s("p",[t._v("如果数据对象是类对象，则使用const引用（传递类对象参数的标准方式是按照引用传递）；")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("对于修改函数中数据的函数：")])]),t._v(" "),s("p",[t._v("如果数据是内置数据类型，则使用指针")]),t._v(" "),s("p",[t._v("如果数据对象是结构，则使用引用或者指针")]),t._v(" "),s("p",[t._v("如果数据是类对象，则使用引用")]),t._v(" "),s("p",[t._v("也有一种说法认为：“如果数据对象是数组，则只能使用指针”，这是不对的，比如")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("T")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",{attrs:{id:"你知道静态绑定和动态绑定吗"}}),t._v(" "),s("h2",{attrs:{id:"_107、你知道静态绑定和动态绑定吗-讲讲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_107、你知道静态绑定和动态绑定吗-讲讲"}},[t._v("#")]),t._v(" 107、你知道静态绑定和动态绑定吗？讲讲？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("对象的静态类型：对象在声明时采用的类型。是在编译期确定的。")])]),t._v(" "),s("li",[s("p",[t._v("对象的动态类型：目前所指对象的类型。是在运行期决定的。对象的动态类型可以更改，但是静态类型无法更改。")])]),t._v(" "),s("li",[s("p",[t._v("静态绑定：绑定的是对象的静态类型，某特性（比如函数依赖于对象的静态类型，发生在编译期。)")])]),t._v(" "),s("li",[s("p",[t._v("动态绑定：绑定的是对象的动态类型，某特性（比如函数依赖于对象的动态类型，发生在运行期。)")])])]),t._v(" "),s("p",{attrs:{id:"如何设计一个类计算子类的个数"}}),t._v(" "),s("h2",{attrs:{id:"_108、如何设计一个计算仅单个子类的对象个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_108、如何设计一个计算仅单个子类的对象个数"}},[t._v("#")]),t._v(" 108、如何设计一个计算仅单个子类的对象个数？")]),t._v(" "),s("p",[t._v("1、为类设计一个static静态变量count作为计数器；")]),t._v(" "),s("p",[t._v("2、类定义结束后初始化count;")]),t._v(" "),s("p",[t._v("3、在构造函数中对count进行+1;")]),t._v(" "),s("p",[t._v("4、 设计拷贝构造函数，在进行拷贝构造函数中进行count +1，操作；")]),t._v(" "),s("p",[t._v("5、设计赋值构造函数，在进行赋值函数中对count+1操作；")]),t._v(" "),s("p",[t._v("6、在析构函数中对count进行-1；")]),t._v(" "),s("blockquote",[s("p",[t._v("感谢微信好友“铁锤哥哥”勘误：“计算子类个数”->计算仅单个子类的对象个数-2021.06.28")])]),t._v(" "),s("p",{attrs:{id:"怎么快速定位错误出现的地方"}}),t._v(" "),s("h2",{attrs:{id:"_109、怎么快速定位错误出现的地方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_109、怎么快速定位错误出现的地方"}},[t._v("#")]),t._v(" 109、怎么快速定位错误出现的地方?")]),t._v(" "),s("p",[t._v("1、如果是简单的错误，可以直接双击错误列表里的错误项或者生成输出的错误信息中带行号的地方就可以让编辑窗口定位到错误的位置上。")]),t._v(" "),s("p",[t._v("2、对于复杂的模板错误，最好使用生成输出窗口。")]),t._v(" "),s("p",[t._v("多数情况下出发错误的位置是最靠后的引用位置。如果这样确定不了错误，就需要先把自己写的代码里的引用位置找出来，然后逐个分析了。")]),t._v(" "),s("p",{attrs:{id:"成员初始化列表会在什么时候用到"}}),t._v(" "),s("h2",{attrs:{id:"_110、成员初始化列表会在什么时候用到-它的调用过程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_110、成员初始化列表会在什么时候用到-它的调用过程是什么"}},[t._v("#")]),t._v(" 110、成员初始化列表会在什么时候用到？它的调用过程是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当初始化一个引用成员变量时；")])]),t._v(" "),s("li",[s("p",[t._v("初始化一个const成员变量时；")])]),t._v(" "),s("li",[s("p",[t._v("当调用一个基类的构造函数，而构造函数拥有一组参数时；")])]),t._v(" "),s("li",[s("p",[t._v("当调用一个成员类的构造函数，而他拥有一组参数；")])]),t._v(" "),s("li",[s("p",[t._v("编译器会一一操作初始化列表，以适当顺序在构造函数之内安插初始化操作，并且在任何显示用户代码前。list中的项目顺序是由类中的成员声明顺序决定的，不是初始化列表中的排列顺序决定的。")])])]),t._v(" "),s("p",{attrs:{id:"在进行函数参数以及返回值传递时，可以使用引用或者值传递"}}),t._v(" "),s("h2",{attrs:{id:"_111、在进行函数参数以及返回值传递时-可以使用引用或者值传递-其中使用引用的好处有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_111、在进行函数参数以及返回值传递时-可以使用引用或者值传递-其中使用引用的好处有哪些"}},[t._v("#")]),t._v(" 111、在进行函数参数以及返回值传递时，可以使用引用或者值传递，其中使用引用的好处有哪些？")]),t._v(" "),s("p",[t._v("对比值传递，引用传参的好处：")]),t._v(" "),s("p",[t._v("1）在函数内部可以对此参数进行修改")]),t._v(" "),s("p",[t._v("2）提高函数调用和运行的效率（因为没有了传值和生成副本的时间和空间消耗）")]),t._v(" "),s("p",[t._v("如果函数的参数实质就是形参，不过这个形参的作用域只是在函数体内部，也就是说实参和形参是两个不同的东西，要想形参代替实参，肯定有一个值的传递。函数调用时，值的传递机制是通过“形参=实参”来对形参赋值达到传值目的，产生了一个实参的副本。即使函数内部有对参数的修改，也只是针对形参，也就是那个副本，实参不会有任何更改。函数一旦结束，形参生命也宣告终结，做出的修改一样没对任何变量产生影响。")]),t._v(" "),s("p",[t._v("用引用作为返回值最大的好处就是在内存中不产生被返回值的副本。")]),t._v(" "),s("p",[t._v("但是有以下的限制：")]),t._v(" "),s("p",[t._v("1）不能返回局部变量的引用。因为函数返回以后局部变量就会被销毁")]),t._v(" "),s("p",[t._v("2）不能返回函数内部new分配的内存的引用。虽然不存在局部变量的被动销毁问题，可对于这种情况（返回函数内部new分配内存的引用），又面临其它尴尬局面。例如，被函数返回的引用只是作为一 个临时变量出现，而没有被赋予一个实际的变量，那么这个引用所指向的空间（由new分配）就无法释放，造成memory leak")]),t._v(" "),s("p",[t._v("3）可以返回类成员的引用，但是最好是const。因为如果其他对象可以获得该属性的非常量的引用，那么对该属性的单纯赋值就会破坏业务规则的完整性。")]),t._v(" "),s("p",{attrs:{id:"sprintf与memcpy这三个函数的不同之处"}}),t._v(" "),s("h2",{attrs:{id:"_112、说一说strcpy、sprintf与memcpy这三个函数的不同之处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_112、说一说strcpy、sprintf与memcpy这三个函数的不同之处"}},[t._v("#")]),t._v(" 112、说一说strcpy、sprintf与memcpy这三个函数的不同之处")]),t._v(" "),s("ol",[s("li",[t._v("操作对象不同")])]),t._v(" "),s("p",[t._v("①   strcpy的两个操作对象均为字符串")]),t._v(" "),s("p",[t._v("②   sprintf的操作源对象可以是多种数据类型，目的操作对象是字符串")]),t._v(" "),s("p",[t._v("③   memcpy的两个对象就是两个任意可操作的内存地址，并不限于何种数据类型。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("执行效率不同")])]),t._v(" "),s("p",[t._v("memcpy最高，strcpy次之，sprintf的效率最低。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("实现功能不同")])]),t._v(" "),s("p",[t._v("①   strcpy主要实现字符串变量间的拷贝")]),t._v(" "),s("p",[t._v("②   sprintf主要实现其他数据类型格式到字符串的转化")]),t._v(" "),s("p",[t._v("③   memcpy主要是内存块间的拷贝。")]),t._v(" "),s("p",{attrs:{id:"将引用作为函数参数有哪些好处"}}),t._v(" "),s("h2",{attrs:{id:"_113、将引用作为函数参数有哪些好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_113、将引用作为函数参数有哪些好处"}},[t._v("#")]),t._v(" 113、将引用作为函数参数有哪些好处？")]),t._v(" "),s("ol",[s("li",[t._v("传递引用给函数与传递指针的效果是一样的。")])]),t._v(" "),s("p",[t._v("这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；")])]),t._v(" "),s("p",[t._v("而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；")]),t._v(" "),s("p",[t._v("如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v('使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用"*指针变量名"的形式进行运算，这很容易产生错误且程序的阅读性较差；')])]),t._v(" "),s("p",[t._v("另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。")]),t._v(" "),s("p",{attrs:{id:"你知道数组和指针的区别吗"}}),t._v(" "),s("h2",{attrs:{id:"_114、你知道数组和指针的区别吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_114、你知道数组和指针的区别吗"}},[t._v("#")]),t._v(" 114、你知道数组和指针的区别吗？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("数组在内存中是连续存放的，开辟一块连续的内存空间；数组所占存储空间：sizeof（数组名）；数组大小：sizeof(数组名)/sizeof(数组元素数据类型)；")])]),t._v(" "),s("li",[s("p",[t._v("用运算符sizeof 可以计算出数组的容量（字节数）。sizeof(p),p 为指针得到的是一个指针变量的字节数，而不是p 所指的内存容量。")])]),t._v(" "),s("li",[s("p",[t._v("编译器为了简化对数组的支持，实际上是利用指针实现了对数组的支持。具体来说，就是将表达式中的数组元素引用转换为指针加偏移量的引用。")])]),t._v(" "),s("li",[s("p",[t._v("在向函数传递参数的时候，如果实参是一个数组，那用于接受的形参为对应的指针。也就是传递过去是数组的首地址而不是整个数组，能够提高效率；")])]),t._v(" "),s("li",[s("p",[t._v("在使用下标的时候，两者的用法相同，都是原地址加上下标值，不过数组的原地址就是数组首元素的地址是固定的，指针的原地址就不是固定的。")])])]),t._v(" "),s("p",{attrs:{id:"如何阻止一个类被实例化"}}),t._v(" "),s("h2",{attrs:{id:"_115、如何阻止一个类被实例化-有哪些方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_115、如何阻止一个类被实例化-有哪些方法"}},[t._v("#")]),t._v(" 115、如何阻止一个类被实例化？有哪些方法？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将类定义为抽象基类或者将构造函数声明为private；")])]),t._v(" "),s("li",[s("p",[t._v("不允许类外部创建类对象，只能在类内部创建对象")])])]),t._v(" "),s("p",{attrs:{id:"如何禁止程序自动生成拷贝构造函数"}}),t._v(" "),s("h2",{attrs:{id:"_116、-如何禁止程序自动生成拷贝构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_116、-如何禁止程序自动生成拷贝构造函数"}},[t._v("#")]),t._v(" 116、 如何禁止程序自动生成拷贝构造函数？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("为了阻止编译器默认生成拷贝构造函数和拷贝赋值函数，我们需要手动去重写这两个函数，某些情况\ufeff下，为了避免调用拷贝构造函数和\ufeff拷贝赋值函数，我们需要将他们设置成private，防止被调用。")])]),t._v(" "),s("li",[s("p",[t._v("类的成员函数和friend函数还是可以调用private函数，如果这个private函数只声明不定义，则会产生一个连接错误；")])]),t._v(" "),s("li",[s("p",[t._v("针对上述两种情况，我们可以定一个base类，在base类中将拷贝构造函数和拷贝赋值函数设置成private,那么派生类中编译器将不会自动生成这两个函数，且由于base类中该函数是私有的，因此，派生类将阻止编译器执行相关的操作。")])])]),t._v(" "),s("p",{attrs:{id:"你知道的八个和瑞丽丝的区别是什么吗"}}),t._v(" "),s("h2",{attrs:{id:"_117、你知道debug和release的区别是什么吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_117、你知道debug和release的区别是什么吗"}},[t._v("#")]),t._v(" 117、你知道Debug和Release的区别是什么吗？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("调试版本，包含调试信息，所以容量比Release大很多，并且不进行任何优化（优化会使调试复杂化，因为源代码和生成的指令间关系会更复杂），便于程序员调试。Debug模式下生成两个文件，除了.exe或.dll文件外，还有一个.pdb文件，该文件记录了代码中断点等调试信息；")])]),t._v(" "),s("li",[s("p",[t._v("发布版本，不对源代码进行调试，编译时对应用程序的速度进行优化，使得程序在代码大小和运行速度上都是最优的。（调试信息可在单独的PDB文件中生成）。Release模式下生成一个文件.exe或.dll文件。")])]),t._v(" "),s("li",[s("p",[t._v("实际上，Debug 和 Release 并没有本质的界限，他们只是一组编译选项的集合，编译器只是按照预定的选项行动。事实上，我们甚至可以修改这些选项，从而得到优化过的调试版本或是带跟踪语句的发布版本。")])])]),t._v(" "),s("p",{attrs:{id:"main函数的返回值有什么值得考究之处吗"}}),t._v(" "),s("h2",{attrs:{id:"_118、main函数的返回值有什么值得考究之处吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_118、main函数的返回值有什么值得考究之处吗"}},[t._v("#")]),t._v(" 118、main函数的返回值有什么值得考究之处吗？")]),t._v(" "),s("p",[t._v("程序运行过程入口点main函数，main（）函数返回值类型必须是int，这样返回值才能传递给程序激活者（如操作系统）表示程序正常退出。")]),t._v(" "),s("p",[t._v("main（int args, char **argv） 参数的传递。参数的处理，一般会调用getopt（）函数处理，但实践中，这仅仅是一部分，不会经常用到的技能点。")]),t._v(" "),s("p",{attrs:{id:"写一个比较大小的模板函数"}}),t._v(" "),s("h2",{attrs:{id:"_119、模板会写吗-写一个比较大小的模板函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_119、模板会写吗-写一个比较大小的模板函数"}},[t._v("#")]),t._v(" 119、模板会写吗？写一个比较大小的模板函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")]),t._v(" ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("type1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("type2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数模板 ")]),t._v("\n\ntype1 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type1 a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("type2 b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Max = "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("其实该模板有个比较隐晦的bug，那就是a、b只有在能进行转型的时候才能进行比较，否则 a > b 这一步是会报错的。")]),t._v(" "),s("p",[t._v("这个时候往往需要对于 > 号进行重载，这代码量瞬间上来了。")]),t._v(" "),s("blockquote",[s("p",[t._v("感谢微信好友“江河”指出a、b转型bug，已采纳-2021.06.28")])]),t._v(" "),s("p",{attrs:{id:"strcpy函数和strncpy函数的区别"}}),t._v(" "),s("h2",{attrs:{id:"_120、strcpy函数和strncpy函数的区别-哪个函数更安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_120、strcpy函数和strncpy函数的区别-哪个函数更安全"}},[t._v("#")]),t._v(" 120、strcpy函数和strncpy函数的区别？哪个函数更安全？")]),t._v(" "),s("ol",[s("li",[t._v("函数原型")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" strDest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" strSrc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strncpy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("ul",[s("li",[s("p",[t._v("strcpy函数: 如果参数 dest 所指的内存空间不够大，可能会造成缓冲溢出(buffer Overflow)的错误情况，在编写程序时请特别留意，或者用strncpy()来取代。")])]),t._v(" "),s("li",[s("p",[t._v("strncpy函数：用来复制源字符串的前n个字符，src 和 dest 所指的内存区域不能重叠，且 dest 必须有足够的空间放置n个字符。")])])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("如果目标长>指定长>源长，则将源长全部拷贝到目标长，自动加上’\\0’")]),t._v(" "),s("li",[t._v("如果指定长<源长，则将源长中按指定长度拷贝到目标字符串，不包括’\\0’")]),t._v(" "),s("li",[t._v("如果指定长>目标长，运行时错误 ；")])])])]),t._v(" "),s("p",{attrs:{id:"斯坦克比西语言中的转换强在哪里"}})])}),[],!1,null,null,null);a.default=r.exports}}]);
