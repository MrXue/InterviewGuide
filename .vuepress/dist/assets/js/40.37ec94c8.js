(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{455:function(t,_,v){"use strict";v.r(_);var a=v(62),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{align:"center"}},[t._v("计算机网络")]),t._v(" "),v("p",{attrs:{id:"偶爱死的七层模型分别是各自的功能是什么"}}),t._v(" "),v("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[v("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),v("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),v("p",[t._v("2、👉23年5月份阿秀从"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),v("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),v("div",{attrs:{align:"center"}}),t._v("网站地址："),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),v("p"),t._v("3、😊\n    分享一个学弟发给我的"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),v("p"),t._v(" "),v("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),v("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),v("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v("\n>\n"),v("h2",{attrs:{id:"_61、-四次挥手相关内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_61、-四次挥手相关内容"}},[t._v("#")]),t._v(" 61、 四次挥手相关内容")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036404.png",alt:""}})]),t._v(" "),v("p",[t._v("建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的"),v("strong",[t._v("半关闭")]),t._v("（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。")]),t._v(" "),v("p",[t._v("TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务器均可主动发起挥手动作。")]),t._v(" "),v("h3",{attrs:{id:"第一种回答"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一种回答"}},[t._v("#")]),t._v(" 第一种回答")]),t._v(" "),v("p",[t._v("刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：")]),t._v(" "),v("ul",[v("li",[t._v("第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 "),v("code",[t._v("FIN_WAIT1")]),t._v(" 状态。 即发出"),v("strong",[t._v("连接释放报文段")]),t._v("（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。")]),t._v(" "),v("li",[t._v("第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 "),v("code",[t._v("CLOSE_WAIT")]),t._v(" 状态。 即服务端收到连接释放报文段后即发出"),v("strong",[t._v("确认报文段")]),t._v("（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。")]),t._v(" "),v("li",[t._v("第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 "),v("code",[t._v("LAST_ACK")]),t._v(" 的状态。 即服务端没有要向客户端发出的数据，服务端发出"),v("strong",[t._v("连接释放报文段")]),t._v("（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。")]),t._v(" "),v("li",[t._v("第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的确认号值，此时客户端处于 "),v("code",[t._v("TIME_WAIT")]),t._v(" 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 "),v("code",[t._v("CLOSED")]),t._v(" 状态。 即客户端收到服务端的连接释放报文段后，对此发出"),v("strong",[t._v("确认报文段")]),t._v("（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。")])]),t._v(" "),v("p",[t._v("收到一个FIN只意味着在这一方向上没有数据流动。"),v("strong",[t._v("客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。")])]),t._v(" "),v("p",[t._v("在socket编程中，任何一方执行close()操作即可产生挥手操作。")]),t._v(" "),v("h3",{attrs:{id:"第二种回答"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二种回答"}},[t._v("#")]),t._v(" 第二种回答")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("初始化状态")]),t._v("：客户端和服务端都在连接状态，接下来开始进行四次分手断开连接操作。")]),t._v(" "),v("li",[v("strong",[t._v("第一次分手")]),t._v("：第一次分手无论是客户端还是服务端都可以发起，因为 TCP 是全双工的。")])]),t._v(" "),v("blockquote",[v("p",[t._v("假如客户端发送的数据已经发送完毕，发送FIN = 1 "),v("strong",[t._v("告诉服务端，客户端所有数据已经全发完了")]),t._v("，"),v("strong",[t._v("服务端你可以关闭接收了")]),t._v("，但是如果你们服务端有数据要发给客户端，客户端照样可以接收的。此时客户端处于FIN = 1等待服务端确认释放连接状态。")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("第二次分手")]),t._v("：服务端接收到客户端的释放请求连接之后，"),v("strong",[t._v("知道客户端没有数据要发给自己了")]),t._v("，"),v("strong",[t._v("然后服务端发送ACK = 1告诉客户端收到你发给我的信息")]),t._v("，此时服务端处于 CLOSE_WAIT 等待关闭状态。（服务端先回应给客户端一声，我知道了，但服务端的发送数据能力即将等待关闭，于是接下来第三次就来了。）")]),t._v(" "),v("li",[v("strong",[t._v("第三次分手")]),t._v("：此时服务端向客户端把所有的数据发送完了，然后发送一个FIN = 1，"),v("strong",[t._v("用于告诉客户端，服务端的所有数据发送完毕")]),t._v("，"),v("strong",[t._v("客户端你也可以关闭接收数据连接了")]),t._v("。此时服务端状态处于LAST_ACK状态，来等待确认客户端是否收到了自己的请求。（服务端等客户端回复是否收到呢，不收到的话，服务端不知道客户端是不是挂掉了还是咋回事呢，所以服务端不敢关闭自己的接收能力，于是第四次就来了。）")]),t._v(" "),v("li",[v("strong",[t._v("第四次分手")]),t._v("：此时如果客户端收到了服务端发送完的信息之后，就发送ACK = 1，告诉服务端，客户端已经收到了你的信息。"),v("strong",[t._v("有一个 2 MSL 的延迟等待")]),t._v("。")])]),t._v(" "),v("blockquote",[v("p",[t._v("感谢网友勘误，https://github.com/forthespada/InterviewGuide/issues/25 - 2022.02.22")])]),t._v(" "),v("p",{attrs:{id:"挥手为什么需要四次"}}),t._v(" "),v("h2",{attrs:{id:"_62、挥手为什么需要四次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_62、挥手为什么需要四次"}},[t._v("#")]),t._v(" 62、挥手为什么需要四次？")]),t._v(" "),v("h3",{attrs:{id:"第一种回答-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一种回答-2"}},[t._v("#")]),t._v(" 第一种回答")]),t._v(" "),v("p",[t._v("因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中"),v("strong",[t._v("ACK报文是用来应答的，SYN报文是用来同步的")]),t._v('。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，"你发的FIN报文我收到了"。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。')]),t._v(" "),v("h3",{attrs:{id:"第二种回答-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二种回答-2"}},[t._v("#")]),t._v(" 第二种回答")]),t._v(" "),v("p",[t._v("任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。")]),t._v(" "),v("p",{attrs:{id:"爱慕斯等待状态"}}),t._v(" "),v("h2",{attrs:{id:"_63、2msl等待状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_63、2msl等待状态"}},[t._v("#")]),t._v(" 63、2MSL等待状态？")]),t._v(" "),v("p",[t._v("TIME_WAIT状态也称为2MSL等待状态。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。")]),t._v(" "),v("p",[t._v("对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）。")]),t._v(" "),v("p",[t._v("这种2MSL等待的另一个结果是这个TCP连接在2MSL等待期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。这个连接只能在2MSL结束后才能再被使用。")]),t._v(" "),v("p",{attrs:{id:"四次挥手释放连接时等待爱慕斯的意义"}}),t._v(" "),v("h2",{attrs:{id:"_64、四次挥手释放连接时-等待2msl的意义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_64、四次挥手释放连接时-等待2msl的意义"}},[t._v("#")]),t._v(" 64、四次挥手释放连接时，等待2MSL的意义?")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("MSL")]),t._v("是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。")])]),t._v(" "),v("p",[t._v("为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。")]),t._v(" "),v("h3",{attrs:{id:"两个理由"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两个理由"}},[t._v("#")]),t._v(" 两个理由")]),t._v(" "),v("ol",[v("li",[t._v("保证客户端发送的最后一个ACK报文段能够到达服务端。 这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。")]),t._v(" "),v("li",[t._v("防止“已失效的连接请求报文段”出现在本连接中。 客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。")])]),t._v(" "),v("p",{attrs:{id:"为什么状态需要经过才能返回到状态"}}),t._v(" "),v("h2",{attrs:{id:"_65、为什么time-wait状态需要经过2msl才能返回到close状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_65、为什么time-wait状态需要经过2msl才能返回到close状态"}},[t._v("#")]),t._v(" 65、为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？")]),t._v(" "),v("h3",{attrs:{id:"第一种回答-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一种回答-3"}},[t._v("#")]),t._v(" 第一种回答")]),t._v(" "),v("p",[t._v("理论上，四个报文都发送完毕，就可以直接进入CLOSE状态了，但是可能网络是不可靠的，有可能最后一个ACK丢失。所以"),v("strong",[t._v("TIME_WAIT状态就是用来重发可能丢失的ACK报文")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"第二种回答-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二种回答-3"}},[t._v("#")]),t._v(" 第二种回答")]),t._v(" "),v("p",[t._v("对应这样一种情况，最后客户端发送的ACK = 1给服务端的"),v("strong",[t._v("过程中丢失")]),t._v("了，服务端没收到，服务端怎么认为的？我已经发送完数据了，怎么客户端没回应我？是不是中途丢失了？然后服务端再次发起断开连接的请求，一个来回就是2MSL。")]),t._v(" "),v("p",[t._v("客户端给服务端发送的ACK = 1丢失，"),v("strong",[t._v("服务端等待 1MSL没收到")]),t._v("，"),v("strong",[t._v("然后重新发送消息需要1MSL")]),t._v("。如果再次接收到服务端的消息，则"),v("strong",[t._v("重启2MSL计时器")]),t._v("，"),v("strong",[t._v("发送确认请求")]),t._v("。客户端只需等待2MSL，如果没有再次收到服务端的消息，就说明服务端已经接收到自己确认消息；此时双方都关闭的连接，TCP 四次分手完毕")]),t._v(" "),v("p",{attrs:{id:"粘包问题是什么你会如何去解决它"}}),t._v(" "),v("h2",{attrs:{id:"_66、tcp粘包问题是什么-你会如何去解决它"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_66、tcp粘包问题是什么-你会如何去解决它"}},[t._v("#")]),t._v(" 66、TCP粘包问题是什么？你会如何去解决它？")]),t._v(" "),v("p",[v("strong",[t._v("TCP粘包")]),t._v("是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。")]),t._v(" "),v("ul",[v("li",[t._v("由TCP"),v("strong",[t._v("连接复用")]),t._v("造成的粘包问题。")]),t._v(" "),v("li",[t._v("因为TCP默认会使用"),v("strong",[t._v("Nagle算法")]),t._v("，此算法会导致粘包问题。\n"),v("ul",[v("li",[t._v("只有上一个分组得到确认，才会发送下一个分组；")]),t._v(" "),v("li",[t._v("收集多个小分组，在一个确认到来时一起发送。")])])]),t._v(" "),v("li",[v("strong",[t._v("数据包过大")]),t._v("造成的粘包问题。")]),t._v(" "),v("li",[t._v("流量控制，"),v("strong",[t._v("拥塞控制")]),t._v("也可能导致粘包。")]),t._v(" "),v("li",[v("strong",[t._v("接收方不及时接收缓冲区的包，造成多个包接收")])])]),t._v(" "),v("p",[v("strong",[t._v("解决")]),t._v("：")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("Nagle算法")]),t._v("问题导致的，需要结合应用场景适当关闭该算法")]),t._v(" "),v("li",[t._v("尾部标记序列。通过特殊标识符表示数据包的边界，例如\\n\\r，\\t，或者一些隐藏字符。")]),t._v(" "),v("li",[t._v("头部标记分步接收。在TCP报文的头部加上表示数据长度。")]),t._v(" "),v("li",[t._v("应用层发送数据时"),v("strong",[t._v("定长")]),t._v("发送。")])]),t._v(" "),v("p",{attrs:{id:"七层模型中表示层和会话层功能是什么"}}),t._v(" "),v("h2",{attrs:{id:"_67、osi七层模型中表示层和会话层功能是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_67、osi七层模型中表示层和会话层功能是什么"}},[t._v("#")]),t._v(" 67、OSI七层模型中表示层和会话层功能是什么？")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("表示层：图像、视频编码解，数据加密。")])]),t._v(" "),v("li",[v("p",[t._v("会话层：建立会话，如session认证、断点续传。")])])]),t._v(" "),v("p",{attrs:{id:"三次握手四次挥手的变迁图"}}),t._v(" "),v("h2",{attrs:{id:"_68、三次握手四次挥手的变迁图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_68、三次握手四次挥手的变迁图"}},[t._v("#")]),t._v(" 68、三次握手四次挥手的变迁图")]),t._v(" "),v("p",[t._v("《TCP/IP详解 卷1:协议》有一张TCP状态变迁图，很具有代表性，有助于大家理解三次握手和四次挥手的状态变化。如下图所示，粗的实线箭头表示正常的客户端状态变迁，粗的虚线箭头表示正常的服务器状态变迁。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036408.png",alt:""}})]),t._v(" "),v("p",{attrs:{id:"对称密钥加密的优点缺点"}}),t._v(" "),v("h2",{attrs:{id:"_69、对称密钥加密的优点缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_69、对称密钥加密的优点缺点"}},[t._v("#")]),t._v(" 69、对称密钥加密的优点缺点？")]),t._v(" "),v("p",[t._v("对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。")]),t._v(" "),v("ul",[v("li",[t._v("优点：运算速度快")]),t._v(" "),v("li",[t._v("缺点：无法安全地将密钥传输给通信方")])]),t._v(" "),v("p",{attrs:{id:"非对称密钥加密你了解吗优缺点"}}),t._v(" "),v("h2",{attrs:{id:"_70、非对称密钥加密你了解吗-优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_70、非对称密钥加密你了解吗-优缺点"}},[t._v("#")]),t._v(" 70、非对称密钥加密你了解吗？优缺点？")]),t._v(" "),v("p",[t._v("非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。")]),t._v(" "),v("p",[t._v("公开密钥所有人都可以获得，"),v("strong",[t._v("通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密")]),t._v("，"),v("strong",[t._v("接收方收到通信内容后使用私有密钥解密")]),t._v("。")]),t._v(" "),v("p",[t._v("非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。")]),t._v(" "),v("ul",[v("li",[t._v("优点：可以更安全地将公开密钥传输给通信发送方；")]),t._v(" "),v("li",[t._v("缺点：运算速度慢。")])]),t._v(" "),v("p",{attrs:{id:"爱去提提屁是什么"}}),t._v(" "),v("h2",{attrs:{id:"_71、https是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_71、https是什么"}},[t._v("#")]),t._v(" 71、HTTPS是什么？")]),t._v(" "),v("p",[t._v("HTTPS 并不是新协议，而是让 "),v("strong",[t._v("HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信")]),t._v("。通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。")]),t._v(" "),v("p",{attrs:{id:"爱去提提屁的缺点有哪些"}}),t._v(" "),v("h2",{attrs:{id:"_72、http的缺点有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_72、http的缺点有哪些"}},[t._v("#")]),t._v(" 72、HTTP的缺点有哪些？")]),t._v(" "),v("ul",[v("li",[t._v("使用明文进行通信，内容可能会被窃听；")]),t._v(" "),v("li",[t._v("不验证通信方的身份，通信方的身份有可能遭遇伪装；")]),t._v(" "),v("li",[t._v("无法证明报文的完整性，报文有可能遭篡改。")])]),t._v(" "),v("p",{attrs:{id:"爱去提提屁采用的加密方式有哪些是对称还是非对称"}}),t._v(" "),v("h2",{attrs:{id:"_73、https采用的加密方式有哪些-是对称还是非对称"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_73、https采用的加密方式有哪些-是对称还是非对称"}},[t._v("#")]),t._v(" 73、HTTPS采用的加密方式有哪些？是对称还是非对称？")]),t._v(" "),v("p",[t._v("HTTPS 采用混合的加密机制，使用"),v("strong",[t._v("非对称密钥加密用于传输对称密钥来保证传输过程的安全性")]),t._v("，之后使用"),v("strong",[t._v("对称密钥加密进行通信来保证通信过程的效率")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036403.png",alt:""}})]),t._v(" "),v("p",[t._v("确保传输安全过程（其实就是rsa原理）：")]),t._v(" "),v("ol",[v("li",[t._v("Client给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。")]),t._v(" "),v("li",[t._v("Server确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。")]),t._v(" "),v("li",[t._v("Client确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给Server。")]),t._v(" "),v("li",[t._v("Server使用自己的私钥，获取Client发来的随机数（Premaster secret）。")]),t._v(" "),v("li",[t._v("Client和Server根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。")])]),t._v(" "),v("p",{attrs:{id:"为什么有的时候刷新页面不需要重新建立"}}),t._v(" "),v("h2",{attrs:{id:"_74、为什么有的时候刷新页面不需要重新建立-ssl-连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_74、为什么有的时候刷新页面不需要重新建立-ssl-连接"}},[t._v("#")]),t._v(" 74、为什么有的时候刷新页面不需要重新建立 SSL 连接？")]),t._v(" "),v("p",[t._v("TCP 连接有的时候会被浏览器和服务端维持一段时间，TCP 不需要重新建立，SSL 自然也会用之前的。")]),t._v(" "),v("p",{attrs:{id:"中的认证中的证书是什么了解过吗"}}),t._v(" "),v("h2",{attrs:{id:"_75、ssl中的认证中的证书是什么-了解过吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_75、ssl中的认证中的证书是什么-了解过吗"}},[t._v("#")]),t._v(" 75、SSL中的认证中的证书是什么？了解过吗？")]),t._v(" "),v("p",[t._v("通过使用 "),v("strong",[t._v("证书")]),t._v(" 来对通信方进行认证。")]),t._v(" "),v("p",[t._v("数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。")]),t._v(" "),v("p",[t._v("服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。")]),t._v(" "),v("p",[t._v("进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。")]),t._v(" "),v("p",{attrs:{id:"爱去提提屁如何禁用缓存如何确认缓存"}}),t._v(" "),v("h2",{attrs:{id:"_76、http如何禁用缓存-如何确认缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_76、http如何禁用缓存-如何确认缓存"}},[t._v("#")]),t._v(" 76、HTTP如何禁用缓存？如何确认缓存？")]),t._v(" "),v("p",[t._v("HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。")]),t._v(" "),v("p",[v("strong",[t._v("禁止进行缓存")])]),t._v(" "),v("p",[t._v("no-store 指令规定不能对请求或响应的任何一部分进行缓存。")]),t._v(" "),v("div",{staticClass:"language-html extra-class"},[v("pre",{pre:!0,attrs:{class:"language-html"}},[v("code",[t._v("Cache-Control: no-store\n")])])]),v("p",[t._v("强制确认缓存")]),t._v(" "),v("p",[t._v("no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。")]),t._v(" "),v("div",{staticClass:"language-html extra-class"},[v("pre",{pre:!0,attrs:{class:"language-html"}},[v("code",[t._v("Cache-Control: no-cache\n")])])]),v("p",{attrs:{id:"传递数据的最大长度能够达到多少呢"}}),t._v(" "),v("h2",{attrs:{id:"_77、get与post传递数据的最大长度能够达到多少呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_77、get与post传递数据的最大长度能够达到多少呢"}},[t._v("#")]),t._v(" 77、GET与POST传递数据的最大长度能够达到多少呢？")]),t._v(" "),v("p",[t._v("get 是通过URL提交数据，因此GET可提交的数据量就跟URL所能达到的最大长度有直接关系。")]),t._v(" "),v("p",[t._v("很多文章都说GET方式提交的数据最多只能是1024字节，而实际上，URL不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。")]),t._v(" "),v("p",[t._v("这个限制是特定的浏览器及服务器对它的限制，比如IE对URL长度的限制是2083字节(2K+35字节)。对于其他浏览器，如FireFox，Netscape等，则没有长度限制，这个时候其限制取决于服务器的操作系统；即如果url太长，服务器可能会因为安全方面的设置从而拒绝请求或者发生不完整的数据请求。")]),t._v(" "),v("p",[t._v("post 理论上讲是没有大小限制的，HTTP协议规范也没有进行大小限制，但实际上post所能传递的数据量大小取决于服务器的设置和内存大小。")]),t._v(" "),v("p",[t._v("因为我们一般post的数据量很少超过MB的，所以我们很少能感觉的到post的数据量限制，但实际中如果你上传文件的过程中可能会发现这样一个问题，即上传个头比较大的文件到服务器时候，可能上传不上去。")]),t._v(" "),v("p",[t._v("以php语言来说，查原因的时候你也许会看到有说PHP上传文件涉及到的参数PHP默认的上传有限定，一般这个值是2MB，更改这个值需要更改php.conf的post_max_size这个值。这就很明白的说明了这个问题了。")]),t._v(" "),v("p",{attrs:{id:"网络层常见协议可以说一下吗"}}),t._v(" "),v("h2",{attrs:{id:"_78、网络层常见协议-可以说一下吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_78、网络层常见协议-可以说一下吗"}},[t._v("#")]),t._v(" 78、网络层常见协议？可以说一下吗？")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("协议")]),t._v(" "),v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("作用")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("IP")]),t._v(" "),v("td",[t._v("网际协议")]),t._v(" "),v("td",[t._v("IP协议不但定义了数据传输时的基本单元和格式，还定义了数据报的递交方法和路由选择")])]),t._v(" "),v("tr",[v("td",[t._v("ICMP")]),t._v(" "),v("td",[t._v("Internet控制报文协议")]),t._v(" "),v("td",[t._v("ICMP就是一个“错误侦测与回报机制”，其目的就是让我们能够检测网路的连线状况﹐也能确保连线的准确性，是ping和traceroute的工作协议")])]),t._v(" "),v("tr",[v("td",[t._v("RIP")]),t._v(" "),v("td",[t._v("路由信息协议")]),t._v(" "),v("td",[t._v("使用“跳数”(即metric)来衡量到达目标地址的路由距离")])]),t._v(" "),v("tr",[v("td",[t._v("IGMP")]),t._v(" "),v("td",[t._v("Internet组管理协议")]),t._v(" "),v("td",[t._v("用于实现组播、广播等通信")])])])]),t._v(" "),v("p",{attrs:{id:"四大拥塞控制算法总结极其重要"}}),t._v(" "),v("h2",{attrs:{id:"_79、tcp四大拥塞控制算法总结-极其重要"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_79、tcp四大拥塞控制算法总结-极其重要"}},[t._v("#")]),t._v(" 79、TCP四大拥塞控制算法总结？（极其重要）")]),t._v(" "),v("h3",{attrs:{id:"四大算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四大算法"}},[t._v("#")]),t._v(" "),v("strong",[t._v("四大算法")])]),t._v(" "),v("p",[t._v("拥塞控制主要是四个算法：1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复。这四个算法不是一天都搞出来的，这个四算法的发展经历了很多时间，到今天都还在优化中。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036635.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"慢热启动算法-slow-start"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#慢热启动算法-slow-start"}},[t._v("#")]),t._v(" 慢热启动算法 – Slow Start")]),t._v(" "),v("p",[t._v("所谓慢启动，也就是TCP连接刚建立，一点一点地提速，试探一下网络的承受能力，以免直接扰乱了网络通道的秩序。")]),t._v(" "),v("p",[t._v("慢启动算法：")]),t._v(" "),v("ol",[v("li",[t._v("连接建好的开始先初始化拥塞窗口cwnd大小为1，表明可以传一个MSS大小的数据。")]),t._v(" "),v("li",[t._v("每当收到一个ACK，cwnd大小加一，呈线性上升。")]),t._v(" "),v("li",[t._v("每当过了一个往返延迟时间RTT(Round-Trip Time)，cwnd大小直接翻倍，乘以2，呈指数让升。")]),t._v(" "),v("li",[t._v("还有一个ssthresh（slow start threshold），是一个上限，当cwnd >= ssthresh时，就会进入“拥塞避免算法”（后面会说这个算法）")])]),t._v(" "),v("h3",{attrs:{id:"拥塞避免算法-congestion-avoidance"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞避免算法-congestion-avoidance"}},[t._v("#")]),t._v(" 拥塞避免算法 – Congestion Avoidance")]),t._v(" "),v("p",[t._v("如同前边说的，当拥塞窗口大小cwnd大于等于慢启动阈值ssthresh后，就进入拥塞避免算法。算法如下：")]),t._v(" "),v("ol",[v("li",[t._v("收到一个ACK，则cwnd = cwnd + 1 / cwnd")]),t._v(" "),v("li",[t._v("每当过了一个往返延迟时间RTT，cwnd大小加一。")])]),t._v(" "),v("p",[t._v("过了慢启动阈值后，拥塞避免算法可以避免窗口增长过快导致窗口拥塞，而是缓慢的增加调整到网络的最佳值。")]),t._v(" "),v("h3",{attrs:{id:"拥塞发生状态时的算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞发生状态时的算法"}},[t._v("#")]),t._v(" 拥塞发生状态时的算法")]),t._v(" "),v("p",[t._v("一般来说，TCP拥塞控制默认认为网络丢包是由于网络拥塞导致的，所以一般的TCP拥塞控制算法以丢包为网络进入拥塞状态的信号。对于丢包有两种判定方式，一种是超时重传RTO[Retransmission Timeout]超时，另一个是收到三个重复确认ACK。")]),t._v(" "),v("p",[t._v("超时重传是TCP协议保证数据可靠性的一个重要机制，其原理是在发送一个数据以后就开启一个计时器，在一定时间内如果没有得到发送数据报的ACK报文，那么就重新发送数据，直到发送成功为止。")]),t._v(" "),v("p",[t._v("但是如果发送端接收到3个以上的重复ACK，TCP就意识到数据发生丢失，需要重传。这个机制不需要等到重传定时器超时，所以叫\n做快速重传，而快速重传后没有使用慢启动算法，而是拥塞避免算法，所以这又叫做快速恢复算法。")]),t._v(" "),v("p",[t._v("超时重传RTO[Retransmission Timeout]超时，TCP会重传数据包。TCP认为这种情况比较糟糕，反应也比较强烈：")]),t._v(" "),v("ul",[v("li",[t._v("由于发生丢包，将慢启动阈值ssthresh设置为当前cwnd的一半，即ssthresh = cwnd / 2.")]),t._v(" "),v("li",[t._v("cwnd重置为1")]),t._v(" "),v("li",[t._v("进入慢启动过程")])]),t._v(" "),v("p",[t._v("最为早期的TCP Tahoe算法就只使用上述处理办法，但是由于一丢包就一切重来，导致cwnd又重置为1，十分不利于网络数据的稳定传递。")]),t._v(" "),v("p",[t._v("所以，TCP Reno算法进行了优化。当收到三个重复确认ACK时，TCP开启快速重传Fast Retransmit算法，而不用等到RTO超时再进行重传：")]),t._v(" "),v("ul",[v("li",[t._v("cwnd大小缩小为当前的一半")]),t._v(" "),v("li",[t._v("ssthresh设置为缩小后的cwnd大小")]),t._v(" "),v("li",[t._v("然后进入快速恢复算法Fast Recovery。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036573.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"快速恢复算法-fast-recovery"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速恢复算法-fast-recovery"}},[t._v("#")]),t._v(" 快速恢复算法 – Fast Recovery")]),t._v(" "),v("p",[t._v("TCP Tahoe是早期的算法，所以没有快速恢复算法，而Reno算法有。在进入快速恢复之前，cwnd和ssthresh已经被更改为原有cwnd的一半。快速恢复算法的逻辑如下：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("cwnd = cwnd + 3 "),v("em",[t._v("MSS，加3")]),t._v(" MSS的原因是因为收到3个重复的ACK。")])]),t._v(" "),v("li",[v("p",[t._v("重传DACKs指定的数据包。")])]),t._v(" "),v("li",[v("p",[t._v("如果再收到DACKs，那么cwnd大小增加一。")])]),t._v(" "),v("li",[v("p",[t._v("如果收到新的ACK，表明重传的包成功了，那么退出快速恢复算法。将cwnd设置为ssthresh，然后进入拥塞避免算法。")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://oss.interviewguide.cn/img/202205220036984.png",alt:""}})])])]),t._v(" "),v("p",[t._v("如图所示，第五个包发生了丢失，所以导致接收方接收到三次重复ACK，也就是ACK5。所以将ssthresh设置当当时cwnd的一半，也就是6/2 = 3，cwnd设置为3 + 3 = 6。然后重传第五个包。当收到新的ACK时，也就是ACK11，则退出快速恢复阶段，将cwnd重新设置为当前的ssthresh，也就是3，然后进入拥塞避免算法阶段。")]),t._v(" "),v("p",{attrs:{id:"为何快速重传是选择次"}}),t._v(" "),v("h2",{attrs:{id:"_80、为何快速重传是选择3次ack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_80、为何快速重传是选择3次ack"}},[t._v("#")]),t._v(" 80、为何快速重传是选择3次ACK？")]),t._v(" "),v("p",[t._v("主要的考虑还是要区分包的丢失是由于链路故障还是乱序等其他因素引发。")]),t._v(" "),v("p",[t._v("两次duplicated ACK时很可能是乱序造成的！三次duplicated ACK时很可能是丢包造成的！四次duplicated ACK更更更可能是丢包造成的，但是这样的响应策略太慢。丢包肯定会造成三次duplicated ACK!综上是选择收到三个重复确认时窗口减半效果最好，这是实践经验。")]),t._v(" "),v("p",[t._v("在没有fast retransmit / recovery 算法之前，重传依靠发送方的retransmit timeout，就是在timeout内如果没有接收到对方的ACK，默认包丢了，发送方就重传，包的丢失原因")]),t._v(" "),v("p",[t._v("1）包checksum 出错")]),t._v(" "),v("p",[t._v("2）网络拥塞")]),t._v(" "),v("p",[t._v("3）网络断，包括路由重收敛，但是发送方无法判断是哪一种情况，于是采用最笨的办法，就是将自己的发送速率减半，即CWND 减为1/2，这样的方法对2是有效的，可以缓解网络拥塞，3则无所谓，反正网络断了，无论发快发慢都会被丢；但对于1来说，丢包是因为偶尔的出错引起，一丢包就对半减速不合理。")]),t._v(" "),v("p",[t._v("于是有了fast retransmit 算法，基于在反向还可以接收到ACK，可以认为网络并没有断，否则也接收不到ACK，如果在timeout 时间内没有接收到> 2 的duplicated ACK，则概率大事件为乱序，乱序无需重传，接收方会进行排序工作；")]),t._v(" "),v("p",[t._v("而如果接收到三个或三个以上的duplicated ACK，则大概率是丢包，可以逻辑推理，发送方可以接收ACK，则网络是通的，可能是1、2造成的，先不降速，重传一次，如果接收到正确的ACK，则一切OK，流速依然（包出错被丢）。")]),t._v(" "),v("p",[t._v("而如果依然接收到duplicated ACK，则认为是网络拥塞造成的，此时降速则比较合理。")]),t._v(" "),v("p",{attrs:{id:"对于番外特状态你知道多少"}})])}),[],!1,null,null,null);_.default=s.exports}}]);
