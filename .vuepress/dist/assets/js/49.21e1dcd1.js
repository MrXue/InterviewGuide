(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{463:function(t,_,e){"use strict";e.r(_);var v=e(62),a=Object(v.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{align:"center"}},[t._v("分布式缓存、锁以及事务")]),t._v(" "),e("p",{attrs:{id:"数据库第一部分"}}),t._v(" "),e("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[e("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),e("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),e("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),e("p",[t._v("2、👉23年5月份阿秀从"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),e("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),e("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),e("div",{attrs:{align:"center"}}),t._v("网站地址："),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),e("p"),t._v("3、😊\n    分享一个学弟发给我的"),e("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),e("p"),t._v(" "),e("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),e("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),e("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),e("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),e("h2",{attrs:{id:"_1、分布式缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、分布式缓存"}},[t._v("#")]),t._v(" 1、分布式缓存")]),t._v(" "),e("h3",{attrs:{id:"_1、应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、应用场景"}},[t._v("#")]),t._v(" 1、应用场景")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("页面缓存")]),t._v("：用来缓存Web 页面的内容片段,包括HTML、CSS 和图片等;")]),t._v(" "),e("li",[e("strong",[t._v("应用对象缓存")]),t._v("：缓存系统作为ORM 框架的二级缓存对外提供服务,目的是减轻数据库的负载压力,加速应用访问;解决分布式Web部署的 session 同步问题，状态缓存.缓存包括Session 会话状态及应用横向扩展时的状态数据等,这类数据一般是难以恢复的,对可用性要求较高,多应用于高可用集群。")]),t._v(" "),e("li",[e("strong",[t._v("并行处理")]),t._v("：通常涉及大量中间计算结果需要共享;")]),t._v(" "),e("li",[e("strong",[t._v("云计算领域提供分布式缓存服务")])])]),t._v(" "),e("h3",{attrs:{id:"_2、缓存雪崩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、缓存雪崩"}},[t._v("#")]),t._v(" 2、缓存雪崩")]),t._v(" "),e("p",[t._v("缓存雪崩我们可以简单的理解为：由于原有缓存失效、新缓存未到之间("),e("strong",[t._v("例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期")]),t._v(")，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。")]),t._v(" "),e("h3",{attrs:{id:"_3、缓存穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、缓存穿透"}},[t._v("#")]),t._v(" 3、缓存穿透")]),t._v(" "),e("p",[t._v("缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。"),e("strong",[t._v("这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空")]),t._v("（"),e("em",[t._v("相当于进行了两次无用的查询")]),t._v("）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。")]),t._v(" "),e("h3",{attrs:{id:"_4、缓存预热"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、缓存预热"}},[t._v("#")]),t._v(" 4、缓存预热")]),t._v(" "),e("p",[t._v("缓存预热这个应该是一个比较常见的概念，相信很多小伙伴都应该可以很容易的理解，缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！")]),t._v(" "),e("h3",{attrs:{id:"_5、缓存更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、缓存更新"}},[t._v("#")]),t._v(" 5、缓存更新")]),t._v(" "),e("p",[t._v("除了缓存服务器自带的缓存失效策略之外，我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：")]),t._v(" "),e("ol",[e("li",[t._v("定时去清理过期的缓存；")]),t._v(" "),e("li",[t._v("当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。")])]),t._v(" "),e("p",[t._v("两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。")]),t._v(" "),e("h3",{attrs:{id:"_6、缓存降级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、缓存降级"}},[t._v("#")]),t._v(" 6、缓存降级")]),t._v(" "),e("p",[t._v("当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。")]),t._v(" "),e("p",[t._v("降级的最终目的是 "),e("strong",[t._v("保证核心服务可用，即使是有损的")]),t._v("。而且有些服务是无法降级的（如加入购物车、结算）。")]),t._v(" "),e("p",[t._v("在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("一般")]),t._v("：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；")]),t._v(" "),e("li",[e("strong",[t._v("警告")]),t._v("：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；")]),t._v(" "),e("li",[e("strong",[t._v("错误")]),t._v("：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；")]),t._v(" "),e("li",[e("strong",[t._v("严重错误")]),t._v("：比如因为特殊原因数据错误了，此时需要紧急人工降级。")])]),t._v(" "),e("h2",{attrs:{id:"_2、分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、分布式锁"}},[t._v("#")]),t._v(" 2、分布式锁")]),t._v(" "),e("h3",{attrs:{id:"_1、redis-的-redlock-锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、redis-的-redlock-锁"}},[t._v("#")]),t._v(" 1、Redis 的 RedLock 锁")]),t._v(" "),e("p",[t._v("为了解决 Redis 单点的问题。 Redis 的作者提出了 RedLock 的解决方案。方案非常的巧妙和简洁。 RedLock 的核心思想就是，"),e("strong",[t._v("同时使用多个 Redis Master 来冗余，且这些节点都是完全的独立的，也不需要对这些节点之间的数据进行同步")]),t._v("。")]),t._v(" "),e("p",[t._v("假设我们有N个Redis节点，N应该是一个大于2的奇数。RedLock的实现步骤:")]),t._v(" "),e("ol",[e("li",[t._v("取得当前时间")]),t._v(" "),e("li",[t._v("使用单节点获取锁的方式，依次获取 N 个节点的 Redis 锁。")]),t._v(" "),e("li",[t._v("如果获取到的锁的数量大于 N/2+1"),e("em",[t._v("N")]),t._v("/2+1 个，且获取的时间小于锁的有效时间(lock validity time)就认为获取到了一个有效的锁，锁自动释放时间就是最初的锁释放时间减去之前获取锁所消耗的时间。")]),t._v(" "),e("li",[t._v("如果获取锁的数量小于 N/2+1"),e("em",[t._v("N")]),t._v("/2+1 ，或者在锁的有效时间(lock validity time)内没有获取到足够的锁，就认为获取锁失败，这个时候需要向所有节点发送释放锁的消息。")])]),t._v(" "),e("p",[t._v("对于释放锁的实现就很简单了，向所有的 Redis 节点发起释放的操作，无论之前是否获取锁成功。")]),t._v(" "),e("h3",{attrs:{id:"_2、基于-zookeeper-的分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、基于-zookeeper-的分布式锁"}},[t._v("#")]),t._v(" 2、基于 ZooKeeper 的分布式锁")]),t._v(" "),e("h4",{attrs:{id:"方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案"}},[t._v("#")]),t._v(" 方案")]),t._v(" "),e("p",[t._v("基于 ZK 的特性，很容易得出使用 ZK 实现分布式锁的落地方案：")]),t._v(" "),e("ol",[e("li",[t._v("使用 ZK 的临时节点和有序节点，每个线程获取锁就是在 ZK 创建一个临时有序的节点，比如在 "),e("code",[t._v("/lock/")]),t._v(" 目录下。")]),t._v(" "),e("li",[t._v("创建节点成功后，获取 "),e("code",[t._v("/lock")]),t._v(" 目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点。")]),t._v(" "),e("li",[t._v("如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。")]),t._v(" "),e("li",[t._v("如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的 "),e("strong",[t._v("前一个节点")]),t._v(" 添加一个事件监听。")])]),t._v(" "),e("h4",{attrs:{id:"缺陷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺陷"}},[t._v("#")]),t._v(" 缺陷")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("羊群效应")]),t._v("：当一个节点变化时，会触发大量的 "),e("code",[t._v("watches")]),t._v(" 事件，导致集群响应变慢。每个节点尽量少的 "),e("code",[t._v("watches")]),t._v("，这里就只注册 "),e("strong",[t._v("前一个节点")]),t._v(" 的监听")]),t._v(" "),e("li",[t._v("ZK 集群的读写吞吐量不高")]),t._v(" "),e("li",[t._v("网络抖动可能导致 Session 离线，锁被释放")])]),t._v(" "),e("h2",{attrs:{id:"_3、分布式事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、分布式事务"}},[t._v("#")]),t._v(" 3、分布式事务")]),t._v(" "),e("h3",{attrs:{id:"_1、2pc-xa方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、2pc-xa方案"}},[t._v("#")]),t._v(" 1、2PC/XA方案")]),t._v(" "),e("p",[t._v("所谓的 XA 方案，即：两阶段提交，有一个事务管理器的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？如果每个数据库都回复 ok，那么就正式提交事务，在各个数据库上执行操作；如果任何其中一个数据库回答不 ok，那么就回滚事务。")]),t._v(" "),e("p",[t._v("这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。")]),t._v(" "),e("p",[t._v("一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。如果你要操作别人的服务的库，你必须是通过调用别的服务的接口来实现，绝对不允许交叉访问别人的数据库。")]),t._v(" "),e("h3",{attrs:{id:"_2、tcc强一致性方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、tcc强一致性方案"}},[t._v("#")]),t._v(" 2、TCC强一致性方案")]),t._v(" "),e("p",[t._v("TCC 的全称是："),e("code",[t._v("Try")]),t._v("、"),e("code",[t._v("Confirm")]),t._v("、"),e("code",[t._v("Cancel")]),t._v("。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Try 阶段")]),t._v("：这个阶段说的是对各个服务的资源做检测以及对资源进行 "),e("strong",[t._v("锁定或者预留")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("Confirm 阶段")]),t._v("：这个阶段说的是在各个服务中执行实际的操作。")]),t._v(" "),e("li",[e("strong",[t._v("Cancel 阶段")]),t._v("：如果任何一个服务的业务方法执行出错，那么这里就需要 "),e("strong",[t._v("进行补偿")]),t._v("，就是执行已经执行成功的业务逻辑的回滚操作。（把那些执行成功的回滚）")])]),t._v(" "),e("p",[t._v("这种方案说实话几乎很少人使用，但是也有使用的场景。因为这个"),e("strong",[t._v("事务回滚实际上是严重依赖于你自己写逻辑来实现回滚和补偿")]),t._v("，会造成巨大的补偿代码量。")]),t._v(" "),e("h3",{attrs:{id:"_3、可靠消息最终一致性方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、可靠消息最终一致性方案"}},[t._v("#")]),t._v(" 3、可靠消息最终一致性方案")]),t._v(" "),e("p",[t._v("基于 MQ 来实现事务。比如阿里的 RocketMQ 就支持消息事务。大概的意思就是：")]),t._v(" "),e("ol",[e("li",[t._v("A 系统先发送一个 prepared 消息到 MQ，如果这个 prepared 消息发送失败那么就直接取消操作别执行了；")]),t._v(" "),e("li",[t._v("如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉 MQ 发送确认消息，如果失败就告诉 MQ 回滚消息；")]),t._v(" "),e("li",[t._v("如果发送了确认消息，那么此时 B 系统会接收到确认消息，然后执行本地的事务；")]),t._v(" "),e("li",[t._v("mq 会自动定时轮询所有 prepared 消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认的消息，是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，而确认消息却发送失败了。")]),t._v(" "),e("li",[t._v("这个方案里，要是系统 B 的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如 B 系统本地回滚后，想办法通知系统 A 也回滚；或者是发送报警由人工来手工回滚和补偿。")])]),t._v(" "),e("h3",{attrs:{id:"_4、最大努力通知方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、最大努力通知方案"}},[t._v("#")]),t._v(" 4、最大努力通知方案")]),t._v(" "),e("ol",[e("li",[t._v("系统 A 本地事务执行完之后，发送个消息到 MQ；")]),t._v(" "),e("li",[t._v("这里会有个专门消费 MQ 的最大努力通知服务，这个服务会消费 MQ 然后写入数据库中记录下来，或者是放入个内存队列也可以，接着调用系统 B 的接口；")]),t._v(" "),e("li",[t._v("要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B，反复 N 次，最后还是不行就放弃。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);
