(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{459:function(t,_,v){"use strict";v.r(_);var r=v(62),e=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{align:"center"}},[t._v("MySQL")]),t._v(" "),v("p",{attrs:{id:"数据库第一部分"}}),t._v(" "),v("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[v("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),v("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),v("p",[t._v("2、👉23年5月份阿秀从"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),v("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),v("div",{attrs:{align:"center"}}),t._v("网站地址："),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),v("p"),t._v("3、😊\n    分享一个学弟发给我的"),v("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),v("p"),t._v(" "),v("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),v("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),v("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),v("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),v("h2",{attrs:{id:"_41、索引如何提高查询速度的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_41、索引如何提高查询速度的"}},[t._v("#")]),t._v(" 41、索引如何提高查询速度的")]),t._v(" "),v("p",[t._v("将无序的数据变成相对有序的数据（就像查有目的一样）")]),t._v(" "),v("p",{attrs:{id:"使用索引的注意事项"}}),t._v(" "),v("h2",{attrs:{id:"_42、使用索引的注意事项"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_42、使用索引的注意事项"}},[t._v("#")]),t._v(" 42、使用索引的注意事项")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("在经常需要搜索的列上，可以加快搜索的速度；")])]),t._v(" "),v("li",[v("p",[t._v("在经常使用在where子句中的列上面创建索引，加快条件的判断速度。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("将打算加索引的列设置为NOT NULL，否则将导致引擎放弃使用索引而进行全表扫描")])])]),t._v(" "),v("li",[v("p",[t._v("在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间")])]),t._v(" "),v("li",[v("p",[t._v("避免where子句中对字段施加函数，这会造成无法命中索引")])]),t._v(" "),v("li",[v("p",[t._v("在中到大型表索引都是非常有效的，但是特大型表的维护开销会很大，不适合建索引，建立用逻辑索引")])]),t._v(" "),v("li",[v("p",[t._v("在经常用到连续的列上，这些列主要是由一些外键，可以加快连接的速度")])]),t._v(" "),v("li",[v("p",[t._v("与业务无关时多使用逻辑主键，也就是自增主键在使用InnoDB时使用与业务无关的自增主键作为主键，即使用逻辑主键，而不要使用业务主键。")])]),t._v(" "),v("li",[v("p",[t._v("删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗")])]),t._v(" "),v("li",[v("p",[t._v("在使用limit offset查询缓存时，可以借助索引来提高性能。")])])]),t._v(" "),v("p",{attrs:{id:"增加的路数可以降低树的高度那么无限增加树的路数是不是可以有最优的查找效率"}}),t._v(" "),v("h2",{attrs:{id:"_43、增加b-树的路数可以降低树的高度-那么无限增加树的路数是不是可以有最优的查找效率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_43、增加b-树的路数可以降低树的高度-那么无限增加树的路数是不是可以有最优的查找效率"}},[t._v("#")]),t._v(" 43、增加B+树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优的查找效率？")]),t._v(" "),v("p",[t._v("不可以。因为这样会形成一个有序数组，文件系统和数据库的索引都是存在硬盘上的，并且如果数据量大的话，不一定能一次性加载到内存中。有序数组没法一次性加载进内存，这时候B+树的多路存储威力就出来了，可以每次加载B+树的一个结点，然后一步步往下找，")]),t._v(" "),v("p",{attrs:{id:"说一下数据库表锁和行锁吧"}}),t._v(" "),v("h2",{attrs:{id:"_44、说一下数据库表锁和行锁吧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_44、说一下数据库表锁和行锁吧"}},[t._v("#")]),t._v(" 44、说一下数据库表锁和行锁吧")]),t._v(" "),v("p",[v("strong",[t._v("表锁")])]),t._v(" "),v("p",[t._v("不会出现死锁，发生锁冲突几率高，并发低。")]),t._v(" "),v("p",[t._v("MyISAM在执行查询语句（select）前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。")]),t._v(" "),v("p",[t._v("MySQL的表级锁有两种模式：表共享读锁和表独占写锁。")]),t._v(" "),v("p",[t._v("读锁会阻塞写，写锁会阻塞读和写")]),t._v(" "),v("ul",[v("li",[t._v("对MyISAM表的读操作，不会阻塞其它进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。")]),t._v(" "),v("li",[t._v("对MyISAM表的写操作，会阻塞其它进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。")])]),t._v(" "),v("p",[t._v("MyISAM不适合做写为主表的引擎，因为写锁后，其它线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。")]),t._v(" "),v("p",[v("strong",[t._v("行锁")])]),t._v(" "),v("p",[t._v("会出现死锁，发生锁冲突几率低，并发高。")]),t._v(" "),v("p",[t._v("在MySQL的InnoDB引擎支持行锁，与Oracle不同，MySQL的行锁是通过索引加载的，也就是说，行锁是加在索引响应的行上的，要是对应的SQL语句没有走索引，则会全表扫描，行锁则无法实现，取而代之的是表锁，此时其它事务无法对当前表进行更新或插入操作。")]),t._v(" "),v("p",[v("strong",[t._v("行锁的实现需要注意：")])]),t._v(" "),v("ul",[v("li",[t._v("行锁必须有索引才能实现，否则会自动锁全表，那么就不是行锁了。")]),t._v(" "),v("li",[t._v("如果是共享锁，两个事务可以锁同一个索引，排它锁则不能。")]),t._v(" "),v("li",[t._v("insert，delete，update在事务中都会自动默认加上排它锁。")])]),t._v(" "),v("p",[v("strong",[t._v("行锁的适用场景：")])]),t._v(" "),v("p",[t._v("A用户消费，service层先查询该用户的账户余额，若余额足够，则进行后续的扣款操作；这种情况查询的时候应该对该记录进行加锁。")]),t._v(" "),v("p",[t._v("否则，B用户在A用户查询后消费前先一步将A用户账号上的钱转走，而此时A用户已经进行了用户余额是否足够的判断，则可能会出现余额已经不足但却扣款成功的情况。")]),t._v(" "),v("p",[t._v("为了避免此情况，需要在A用户操作该记录的时候进行for update加锁")]),t._v(" "),v("p",{attrs:{id:"语法中内连接自连接外连接左右全交叉连接的区别分别是什么"}}),t._v(" "),v("h2",{attrs:{id:"_45、sql语法中内连接、自连接、外连接-左、右、全-、交叉连接的区别分别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_45、sql语法中内连接、自连接、外连接-左、右、全-、交叉连接的区别分别是什么"}},[t._v("#")]),t._v(" 45、SQL语法中内连接、自连接、外连接（左、右、全）、交叉连接的区别分别是什么？")]),t._v(" "),v("p",[t._v("内连接：只有两个元素表相匹配的才能在结果集中显示。\n外连接： 左外连接: 左边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。\n右外连接:右边为驱动表，驱动表的数据全部显示，匹配表的不匹配的不会显示。\n全外连接：连接的表中不匹配的数据全部会显示出来。\n交叉连接： 笛卡尔效应，显示的结果是链接表数的乘积。")]),t._v(" "),v("p",{attrs:{id:"你知道哪些数据库结构优化的手段"}}),t._v(" "),v("h2",{attrs:{id:"_46、你知道哪些数据库结构优化的手段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_46、你知道哪些数据库结构优化的手段"}},[t._v("#")]),t._v(" 46、你知道哪些数据库结构优化的手段？")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("范式优化")]),t._v("： 比如消除冗余（节省空间。。）")]),t._v(" "),v("li",[v("strong",[t._v("反范式优化")]),t._v("：比如适当加冗余等（减少join）")]),t._v(" "),v("li",[v("strong",[t._v("限定数据的范围")]),t._v("： 务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内。")]),t._v(" "),v("li",[v("strong",[t._v("读/写分离")]),t._v("： 经典的数据库拆分方案，主库负责写，从库负责读；")]),t._v(" "),v("li",[v("strong",[t._v("拆分表")]),t._v("：分区将数据在物理上分隔开，不同分区的数据可以制定保存在处于不同磁盘上的数据文件里。这样，当对这个表进行查询时，只需要在表分区中进行扫描，而不必进行全表扫描，明显缩短了查询时间，另外处于不同磁盘的分区也将对这个表的数据传输分散在不同的磁盘I/O，一个精心设置的分区可以将数据传输对磁盘I/O竞争均匀地分散开。对数据量大的时时表可采取此方法。可按月自动建表分区。")])]),t._v(" "),v("p",{attrs:{id:"数据库优化中有一个比较常用的手段就是把数据表进行拆分关于拆分数据表你了解哪些"}}),t._v(" "),v("h2",{attrs:{id:"_47、数据库优化中有一个比较常用的手段就是把数据表进行拆分-关于拆分数据表你了解哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_47、数据库优化中有一个比较常用的手段就是把数据表进行拆分-关于拆分数据表你了解哪些"}},[t._v("#")]),t._v(" 47、数据库优化中有一个比较常用的手段就是把数据表进行拆分，关于拆分数据表你了解哪些？")]),t._v(" "),v("p",[t._v("拆分其实又分"),v("strong",[t._v("垂直拆分")]),t._v("和"),v("strong",[t._v("水平拆分")])]),t._v(" "),v("p",[t._v("案例： 简单购物系统暂设涉及如下表：")]),t._v(" "),v("p",[t._v("1.产品表（数据量10w，稳定）")]),t._v(" "),v("p",[t._v("2.订单表（数据量200w，且有增长趋势）")]),t._v(" "),v("p",[t._v("3.用户表 （数据量100w，且有增长趋势）")]),t._v(" "),v("p",[t._v("以 MySQL 为例讲述下水平拆分和垂直拆分，MySQL能容忍的数量级在百万静态数据可以到千万")]),t._v(" "),v("p",[v("strong",[t._v("垂直拆分")])]),t._v(" "),v("p",[t._v("解决问题：表与表之间的io竞争")]),t._v(" "),v("p",[t._v("不解决问题：单表中数据量增长出现的压力")]),t._v(" "),v("p",[t._v("方案： 把产品表和用户表放到一个server上 订单表单独放到一个server上")]),t._v(" "),v("p",[v("strong",[t._v("水平拆分")])]),t._v(" "),v("p",[t._v("解决问题：单表中数据量增长出现的压力")]),t._v(" "),v("p",[t._v("不解决问题：表与表之间的io争夺")]),t._v(" "),v("p",[t._v("方案："),v("strong",[t._v("用户表")]),t._v(" 通过性别拆分为男用户表和女用户表，"),v("strong",[t._v("订单表")]),t._v(" 通过已完成和完成中拆分为已完成订单和未完成订单，"),v("strong",[t._v("产品表")]),t._v(" 未完成订单放一个server上，已完成订单表盒男用户表放一个server上，女用户表放一个server上(女的爱购物 哈哈)。")]),t._v(" "),v("p",{attrs:{id:"为什么索引要使用树而不是树或者红黑树"}}),t._v(" "),v("h2",{attrs:{id:"_48、为什么mysql索引要使用b-树-而不是b树或者红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_48、为什么mysql索引要使用b-树-而不是b树或者红黑树"}},[t._v("#")]),t._v(" 48、为什么MySQL索引要使用B+树，而不是B树或者红黑树？")]),t._v(" "),v("p",[t._v("我们在MySQL中的数据一般是放在磁盘中的，读取数据的时候肯定会有访问磁盘的操作，磁盘中有两个机械运动的部分，分别是盘片旋转和磁臂移动。盘片旋转就是我们市面上所提到的多少转每分钟，而磁盘移动则是在盘片旋转到指定位置以后，移动磁臂后开始进行数据的读写。那么这就存在一个定位到磁盘中的块的过程，而定位是磁盘的存取中花费时间比较大的一块，毕竟机械运动花费的时候要远远大于电子运动的时间。当大规模数据存储到磁盘中的时候，显然定位是一个非常花费时间的过程，但是我们可以通过B树进行优化，提高磁盘读取时定位的效率。")]),t._v(" "),v("p",[t._v("为什么B类树可以进行优化呢？我们可以根据B类树的特点，构造一个多阶的B类树，然后在尽量多的在结点上存储相关的信息，"),v("strong",[t._v("保证层数（树的高度）尽量的少")]),t._v("，以便后面我们可以更快的找到信息，"),v("strong",[t._v("磁盘的I/O操作也少一些")]),t._v("，而且B类树是平衡树，每个结点到叶子结点的高度都是相同，这也保证了每个查询是稳定的。")]),t._v(" "),v("p",[t._v("特别地："),v("strong",[t._v("只有B-树和B+树，这里的B-树是叫B树，不是B减树，没有B减树的说法。")])]),t._v(" "),v("p",{attrs:{id:"为什么索引适用用树而不用表和树"}}),t._v(" "),v("h2",{attrs:{id:"_49、为什么mysql索引适用用b-树而不用hash表和b树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_49、为什么mysql索引适用用b-树而不用hash表和b树"}},[t._v("#")]),t._v(" 49、为什么MySQL索引适用用B+树而不用hash表和B树？")]),t._v(" "),v("ul",[v("li",[t._v("利用Hash需要把数据全部"),v("strong",[t._v("加载到内存中")]),t._v("，如果数据量大，是一件很"),v("strong",[t._v("消耗内存")]),t._v("的事，而采用B+树，是基于"),v("strong",[t._v("按照节点分段加载，由此减少内存消耗")]),t._v("。")]),t._v(" "),v("li",[t._v("和业务场景有段，"),v("strong",[t._v("对于唯一查找")]),t._v("（查找一个值），Hash确实更快，"),v("strong",[t._v("但数据库中经常查询多条数据")]),t._v("，这时候由于B+数据的有序性，与叶子节点又有链表相连，他的查询效率会比Hash快的多。")]),t._v(" "),v("li",[t._v("b+树的"),v("strong",[t._v("非叶子节点不保存数据")]),t._v("，"),v("strong",[t._v("只保存子树的临界值")]),t._v("（最大或者最小），所以同样大小的节点，"),v("strong",[t._v("b+树相对于b树能够有更多的分支，使得这棵树更加矮胖，查询时做的IO操作次数也更少")]),t._v("。")])]),t._v(" "),v("p",{attrs:{id:"既然比树更快为什么用树来存储索引呢"}}),t._v(" "),v("h2",{attrs:{id:"_50、既然hash比b-树更快-为什么mysql用b-树来存储索引呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_50、既然hash比b-树更快-为什么mysql用b-树来存储索引呢"}},[t._v("#")]),t._v(" 50、既然Hash比B+树更快，为什么MySQL用B+树来存储索引呢？")]),t._v(" "),v("p",[t._v("MySQL中存储索引用到的数据结构是B+树，B+树的查询时间跟树的高度有关，是log(n)，如果用hash存储，那么查询时间是O(1)。")]),t._v(" "),v("p",[t._v("采用Hash来存储确实要更快，但是采用B+树来存储索引的原因主要有以下两点：")]),t._v(" "),v("p",[t._v("一、"),v("strong",[t._v("从内存角度上说")]),t._v("，数据库中的索引一般是在磁盘上，数据量大的情况可能无法一次性装入内存，B+树的设计可以允许数据分批加载。")]),t._v(" "),v("p",[t._v("二、"),v("strong",[t._v("从业务场景上说")]),t._v("，如果只选择一个数据那确实是hash更快，但是数据库中经常会选中多条，这时候由于B+树索引有序，并且又有链表相连，它的查询效率比hash就快很多了。")]),t._v(" "),v("p",{attrs:{id:"关系型数据库的四大特性在得不到保障的情况下会怎样"}}),t._v(" "),v("h2",{attrs:{id:"_51、关系型数据库的四大特性在得不到保障的情况下会怎样"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_51、关系型数据库的四大特性在得不到保障的情况下会怎样"}},[t._v("#")]),t._v(" 51、关系型数据库的四大特性在得不到保障的情况下会怎样？")]),t._v(" "),v("p",[t._v("ACID，原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)")]),t._v(" "),v("p",[t._v("我们以从A账户转账50元到B账户为例进行说明一下ACID这四大特性。")]),t._v(" "),v("p",[v("strong",[t._v("原子性")])]),t._v(" "),v("p",[t._v("原子性是指一个事务是一个不可分割的工作单位，"),v("strong",[t._v("其中的操作要么都做，要么都不做")]),t._v("。即要么转账成功，要么转账失败，是不存在中间的状态！")]),t._v(" "),v("p",[v("strong",[t._v("如果无法保证原子性会怎么样？")])]),t._v(" "),v("p",[t._v("OK，就会出现数据不一致的情形，A账户减去50元，而B账户增加50元操作失败。系统将无故丢失50元~")]),t._v(" "),v("p",[v("strong",[t._v("一致性")])]),t._v(" "),v("p",[t._v("一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。 那什么是合法的数据状态呢？这个状态是满足预定的约束就叫做合法的状态，再通俗一点，这状态是由你自己来定义的。"),v("strong",[t._v("满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的！")])]),t._v(" "),v("p",[v("strong",[t._v("如果无法保证一致性会怎么样？")])]),t._v(" "),v("ul",[v("li",[t._v("例一:A账户有200元，转账300元出去，此时A账户余额为-100元。你自然就发现了此时数据是不一致的，为什么呢？因为你定义了一个状态，余额这列必须大于0。")]),t._v(" "),v("li",[t._v("例二:A账户200元，转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外，余额并没有增加。你也知道此时数据是不一致的，为什么呢？因为你定义了一个状态，要求A+B的余额必须不变。")])]),t._v(" "),v("p",[v("strong",[t._v("隔离性")])]),t._v(" "),v("p",[t._v("隔离性是指"),v("strong",[t._v("多个事务并发执行的时候，事务内部的操作与其他事务是隔离的")]),t._v("，并发执行的各个事务之间不能互相干扰。")]),t._v(" "),v("p",[v("strong",[t._v("如果无法保证隔离性会怎么样")]),t._v("？")]),t._v(" "),v("p",[t._v("假设A账户有200元，B账户0元。A账户往B账户转账两次，金额为50元，分别在两个事务中执行。如果无法保证隔离性，A可能就会出现扣款两次的情形，而B只加款一次，凭空消失了50元，依然出现了数据不一致的情形！")]),t._v(" "),v("p",[v("strong",[t._v("持久性")])]),t._v(" "),v("p",[t._v("根据定义，"),v("strong",[t._v("持久性是指事务一旦提交，它对数据库的改变就应该是永久性的")]),t._v("。接下来的其他操作或故障不应该对其有任何影响。")]),t._v(" "),v("p",[t._v("如果无法保证持久性会怎么样？")]),t._v(" "),v("p",[t._v("在MySQL中，为了解决CPU和磁盘速度不一致问题，MySQL是将磁盘上的数据加载到内存，对内存进行操作，然后再回写磁盘。好，假设此时宕机了，在内存中修改的数据全部丢失了，持久性就无法保证。")]),t._v(" "),v("p",[t._v("设想一下，系统提示你转账成功。但是你发现金额没有发生任何改变，此时数据出现了不合法的数据状态，我们将这种状态认为是"),v("strong",[t._v("数据不一致")]),t._v("的情形。")]),t._v(" "),v("p",{attrs:{id:"数据库如何保证一致性"}}),t._v(" "),v("h2",{attrs:{id:"_52、数据库如何保证一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_52、数据库如何保证一致性"}},[t._v("#")]),t._v(" 52、数据库如何保证一致性？")]),t._v(" "),v("p",[t._v("分为两个层面来说。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("从数据库层面")]),t._v("，数据库通过原子性、隔离性、持久性来保证一致性。也就是说ACID四大特性之中，C(一致性)是目的，A(原子性)、I(隔离性)、D(持久性)是手段，是为了保证一致性，数据库提供的手段。"),v("strong",[t._v("数据库必须要实现AID三大特性，才有可能实现一致性")]),t._v("。例如，原子性无法保证，显然一致性也无法保证。")]),t._v(" "),v("li",[v("strong",[t._v("从应用层面")]),t._v("，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据！")])]),t._v(" "),v("p",{attrs:{id:"数据库如何保证原子性"}}),t._v(" "),v("h2",{attrs:{id:"_53、数据库如何保证原子性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_53、数据库如何保证原子性"}},[t._v("#")]),t._v(" 53、数据库如何保证原子性？")]),t._v(" "),v("p",[t._v("主要是利用 Innodb 的"),v("strong",[t._v("undo log")]),t._v("。 "),v("strong",[t._v("undo log")]),t._v("名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的 SQL语句，他需要记录你要回滚的相应日志信息。 例如")]),t._v(" "),v("ul",[v("li",[t._v("当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据")]),t._v(" "),v("li",[t._v("当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作")]),t._v(" "),v("li",[t._v("当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作")])]),t._v(" "),v("p",[v("strong",[t._v("undo log")]),t._v("记录了这些回滚需要的信息，当事务执行失败或调用了"),v("strong",[t._v("rollback")]),t._v("，导致事务需要回滚，便可以利用"),v("strong",[t._v("undo log")]),t._v("中的信息将数据回滚到修改之前的样子。")]),t._v(" "),v("p",{attrs:{id:"数据库如何保证持久性"}}),t._v(" "),v("h2",{attrs:{id:"_54、数据库如何保证持久性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_54、数据库如何保证持久性"}},[t._v("#")]),t._v(" 54、数据库如何保证持久性？")]),t._v(" "),v("p",[t._v("主要是利用Innodb的"),v("strong",[t._v("redo log")]),t._v("。重写日志， 正如之前说的，MySQL是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再写回到磁盘上。如果此时突然宕机，内存中的数据就会丢失。 怎么解决这个问题？ 简单啊，事务提交前直接把数据写入磁盘就行啊。 这么做有什么问题？")]),t._v(" "),v("ul",[v("li",[t._v("只修改一个页面里的一个字节，就要将整个页面刷入磁盘，太浪费资源了。毕竟一个页面16kb大小，你只改其中一点点东西，就要将16kb的内容刷入磁盘，听着也不合理。")]),t._v(" "),v("li",[t._v("毕竟一个事务里的SQL可能牵涉到多个数据页的修改，而这些数据页可能不是相邻的，也就是属于随机IO。显然操作随机IO，速度会比较慢。")])]),t._v(" "),v("p",[t._v("于是，决定采用"),v("strong",[t._v("redo log")]),t._v("解决上面的问题。当做数据修改的时候，不仅在内存中操作，还会在"),v("strong",[t._v("redo log")]),t._v("中记录这次操作。当事务提交的时候，会将"),v("strong",[t._v("redo log")]),t._v("日志进行刷盘("),v("strong",[t._v("redo log")]),t._v("一部分在内存中，一部分在磁盘上)。当数据库宕机重启的时候，会将redo log中的内容恢复到数据库中，再根据"),v("strong",[t._v("undo log")]),t._v("和"),v("strong",[t._v("binlog")]),t._v("内容决定回滚数据还是提交数据。")]),t._v(" "),v("p",[v("strong",[t._v("采用redo log的好处？")])]),t._v(" "),v("p",[t._v("其实好处就是将"),v("strong",[t._v("redo log")]),t._v("进行刷盘比对数据页刷盘效率高，具体表现如下：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("redo log")]),t._v("体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。")]),t._v(" "),v("li",[v("strong",[t._v("redo log")]),t._v("是一直往末尾进行追加，属于顺序IO。效率显然比随机IO来的快。")])]),t._v(" "),v("p",{attrs:{id:"数据库高并发是我们经常会遇到的你有什么好的解决方案吗"}}),t._v(" "),v("h2",{attrs:{id:"_55、数据库高并发是我们经常会遇到的-你有什么好的解决方案吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_55、数据库高并发是我们经常会遇到的-你有什么好的解决方案吗"}},[t._v("#")]),t._v(" 55、数据库高并发是我们经常会遇到的，你有什么好的解决方案吗？")]),t._v(" "),v("ul",[v("li",[t._v("在web服务框架中加入缓存。在服务器与数据库层之间加入缓存层，将高频访问的数据存入缓存中，减少数据库的读取负担。")]),t._v(" "),v("li",[t._v("增加数据库索引，进而提高查询速度。（不过索引太多会导致速度变慢，并且数据库的写入会导致索引的更新，也会导致速度变慢）")]),t._v(" "),v("li",[t._v("主从读写分离，让主服务器负责写，从服务器负责读。")]),t._v(" "),v("li",[t._v("将数据库进行拆分，使得数据库的表尽可能小，提高查询的速度。")]),t._v(" "),v("li",[t._v("使用分布式架构，分散计算压力。")])]),t._v(" "),v("p",{attrs:{id:"reference"}}),t._v("\n## 参考文献\n"),v("blockquote",[v("p",[t._v("《高性能MySQL》：https://item.jd.com/11220393.md")]),t._v(" "),v("p",[t._v("《 MySQL是怎样运行的 从根儿上理解MySQL》:https://item.jd.com/13009316.md")]),t._v(" "),v("p",[t._v("《 MySQL技术内幕：InnoDB存储引擎（第2版）》:https://item.jd.com/11252326.md")]),t._v(" "),v("p",[t._v("极客时间专栏-《MySQL实战45讲》：https://time.geekbang.org/column/intro/100020801")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/BEYOA/article/details/115829327")]),t._v(" "),v("p",[t._v("https://segmentfault.com/a/119000003984710")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/FL63Zv96950w/article/details/11577443")]),t._v(" "),v("p",[t._v("https://segmentfault.com/a/1190000039848")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/wypblog/article/details/1158432")]),t._v(" "),v("p",[t._v("https://segmentfault.com/q/101000003971")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/wei6569/article/details/11585679")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/dog250/article/details/115783")]),t._v(" "),v("p",[t._v("https://segmentfault.com/q/101000421003971")]),t._v(" "),v("p",[t._v("https://blog.csdn.net/prograer_editor/article/details/11572561")]),t._v(" "),v("p",[t._v("https://segmentfault.com/q/10100004134471")]),t._v(" "),v("p",[t._v("https://csdnnews.blog.csdn.net/article/details/11574389")]),t._v(" "),v("p",[t._v("https://segmentfault.com/q/101000714155354")])])])}),[],!1,null,null,null);_.default=e.exports}}]);
