(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{738:function(t,e,r){"use strict";r.r(e);var n=r(62),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticStyle:{"border-color":"#24C6DC","background-color":"#e9f9f3",margin:"1rem 0",padding:".25rem 1rem","border-left-width":".3rem","border-left-style":"solid","border-radius":".5rem",color:"inherit"}},[r("p",[t._v("这是六则或许对你有些许帮助的信息:")]),t._v(" "),r("p",[t._v("⭐️1、阿秀与朋友合作开发了一个"),r("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("编程资源网站")]),t._v("，目前已经收录了很多不错的学习资源和黑科技（附带下载地址），如过你想要寻求合适的编程资源，"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://tools.interviewguide.cn/home",target:"_blank"}},[t._v("欢迎体验")]),t._v("以及推荐自己认为不错的资源，众人拾柴火焰高，我为人人，人人为我🔥！")]),t._v(" "),r("p",[t._v("2、👉23年5月份阿秀从"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzk0ODU4MzEzMw==&mid=2247512170&idx=1&sn=c4a04a383d2dfdece676b75f17224e78",target:"_blank"}},[t._v("字节跳动离职跳槽到某外企")]),t._v("期间，为"),r("span",{staticStyle:{"font-weight":"bold"}},[t._v("方便自己找工作，增加上岸几率")]),t._v("，我自己从0开发了一个"),r("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("互联网中大厂面试真题解析网站")]),t._v("，包括两个前端和一个后端。能够定向查看某些公司的某些岗位面试真题，比如我想查一下行业为互联网，公司为字节跳动，考察岗位为后端，考察时间为最近一年之类的面试题有哪些？\n")]),r("div",{attrs:{align:"center"}}),t._v("网站地址："),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://top.interviewguide.cn/",target:"_blank"}},[t._v("InterviewGuide大厂面试真题解析网站")]),t._v("。点此可以查看该网站的视频介绍："),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.bilibili.com/video/BV1f94y1C7BL",target:"_blank"}},[t._v("B站视频讲解")]),t._v("   如果可以的话求个B站三连，感谢！\n  "),r("p"),t._v("3、😊\n    分享一个学弟发给我的"),r("span",{staticStyle:{"font-weight":"bold",color:"red"}},[t._v("20T网盘资源合集")]),t._v("，"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://docs.qq.com/sheet/DY3VPVklVaFFMcUZ4?tab=9h5afr",target:"_blank"}},[t._v("点此白嫖")]),t._v("，主要是各类高清影视、电视剧、音乐、副业、纪录片、英语四六级考试、考研考公等资源。\n  "),r("p"),t._v(" "),r("p",[t._v("4、😍免费分享阿秀个人学习计算机以来收集到的免费学习资源，"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/01-free/01-introduce.html",target:"_blank"}},[t._v("点此白嫖")]),t._v("；也记录一下自己以前买过的"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")]),t._v("；也记录一下自己以前买过的"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"/notes/07-resources/02-precious.html",target:"_blank"}},[t._v("不错的计算机书籍、网络专栏和垃圾付费专栏")])]),t._v(" "),r("p",[t._v("5、🚀如果你想在校招中顺利拿到更好的offer，阿秀建议你多看看前人"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("踩过的坑")]),t._v("和"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{target:"_blank",href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp"}},[t._v("留下的经验")]),t._v("，事实上你现在遇到的大多数问题你的学长学姐师兄师姐基本都已经遇到过了。\n  ")]),t._v(" "),r("p",[t._v("6、🔥 欢迎准备计算机校招的小伙伴加入我的"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/xg0otqvc17wfx4u9",target:"_blank"}},[t._v("学习圈子")]),t._v("，一个人踽踽独行不如一群人报团取暖，圈子里沉淀了很多过去21/22/23届学长学姐的"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/gge9ppd0mbu2d3dp",target:"_blank"}},[t._v("经验和总结")]),t._v("，好好跟着走下去的，最后基本都可以拿到不错的offer！此外，每周都会进行"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/npg1k81zeq4wfpyz",target:"_blank"}},[t._v("精华总结和分享！")]),t._v("如果你需要《阿秀的学习笔记》网站中📚︎校招八股文相关知识点的PDF版本的话，可以"),r("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"https://www.yuque.com/tuobaaxiu/httmmc/qs0yn66apvkzw0ps",target:"_blank"}},[t._v("点此下载")]),t._v(" 。")])]),t._v(" "),r("h2",{attrs:{id:"_72-编辑距离-非常经典的dp问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_72-编辑距离-非常经典的dp问题"}},[t._v("#")]),t._v(" 72. 编辑距离  非常经典的DP问题")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣原题链接（点我直达）"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("给定两个单词 "),r("em",[t._v("word1")]),t._v(" 和 "),r("em",[t._v("word2")]),t._v("，计算出将 "),r("em",[t._v("word1")]),t._v(" 转换成 "),r("em",[t._v("word2")]),t._v(" 所使用的最少操作数 。")]),t._v(" "),r("p",[t._v("你可以对一个单词进行如下三种操作：")]),t._v(" "),r("ol",[r("li",[t._v("插入一个字符")]),t._v(" "),r("li",[t._v("删除一个字符")]),t._v(" "),r("li",[t._v("替换一个字符")])]),t._v(" "),r("p",[r("strong",[t._v("示例 1:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("输入: word1 = \"horse\", word2 = \"ros\"\n输出: 3\n解释: \nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n")])])]),r("p",[r("strong",[t._v("示例 2:")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("输入: word1 = \"intention\", word2 = \"execution\"\n输出: 5\n解释: \nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n")])])]),r("h3",{attrs:{id:"第一版-别人的解法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一版-别人的解法"}},[t._v("#")]),t._v(" 第一版，别人的解法")]),t._v(" "),r("h4",{attrs:{id:"第一种解答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一种解答"}},[t._v("#")]),t._v(" 第一种解答")]),t._v(" "),r("p",[t._v("求解编辑距离，也是经典老题，编辑距离其实在实际工作中也会用到，主要用于分析两个单词的相似程度，两个单词的编辑距离越小证明两个单词的相似度越高。")]),t._v(" "),r("p",[t._v("题目说可以通过"),r("strong",[t._v("增加字符")]),t._v("，"),r("strong",[t._v("删除字符")]),t._v("，以及 "),r("strong",[t._v("替换字符")]),t._v(" 这三个操作来改变一个字符串，并且每个操作的 cost 都是 1，问一个单词转换成另一个单词的最小 cost，老样子，四个步骤分析一遍：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("问题拆解")]),t._v(" "),r("p",[t._v("我们考虑求解 str1(0…m) 通过多少 cost 变成 str2(0…n)，还是来看看它的子问题，其实还是三个")])]),t._v(" "),r("li",[r("p",[t._v("str1(0…m-1) 通过多少 cost 变成 str2(0…n)")])]),t._v(" "),r("li",[r("p",[t._v("str1(0…m) 通过多少 cost 变成 str2(0…n-1)")])]),t._v(" "),r("li",[r("p",[t._v("str1(0…m-1) 通过多少 cost 变成 str2(0…n-1)")]),t._v(" "),r("p",[t._v("你可能会问你怎么这么快就写出子问题来，这些子问题是如何推导来的，它们和当前问题之间的联系又是什么？")]),t._v(" "),r("p",[t._v("别急，听我慢慢道来。")]),t._v(" "),r("p",[r("strong",[t._v("一般字符匹配类问题的核心永远是两个字符串中的字符的比较")]),t._v("，而且字符比较也只会有两种结果，那就是 "),r("strong",[t._v("相等")]),t._v(" 和 "),r("strong",[t._v("不相等")]),t._v("，在字符比较的结果之上我们才会进行动态规划的统计和推导。")]),t._v(" "),r("p",[t._v("回到这道题，当我们在比较 str1(m) 和 str2(n) 的时候也会有两种结果，即 "),r("strong",[t._v("相等")]),t._v(" 或"),r("strong",[t._v("不相等")]),t._v("，如果说是 "),r("strong",[t._v("相等")]),t._v("，那其实我们就不需要考虑这两个字符，问题就直接变成了子问题 str1(0…m-1) 通过多少 cost 变成 str2(0…n-1)，如果说 "),r("strong",[t._v("不相等")]),t._v("，那我们就可以执行题目给定的三种变换策略:")])]),t._v(" "),r("li",[r("p",[t._v("将问题中的 str1 末尾字符 str1(m) "),r("strong",[t._v("删除")]),t._v("，因此只需要考虑子问题 str1(0…m-1)，str2(0…n)")])]),t._v(" "),r("li",[r("p",[t._v("将问题中的 str1 末尾字符 str1(m) "),r("strong",[t._v("替换")]),t._v(" 成 str2(n)，这里我们就只需要考虑子问题 str1(0…m-1)，str2(0…n-1)")])]),t._v(" "),r("li",[r("p",[t._v("将问题中的 str1 末尾 "),r("strong",[t._v("添加")]),t._v(" 一个字符 str2(n)，添加后 str1(m+1) 必定等于 str2(n)，所以，我们就只需要考虑子问题 str1(0…m)，str2(0…n-1)")]),t._v(" "),r("p",[t._v("如果你还不是特别清楚问题之间的关系，那就画图表吧，这里我就略过。")])]),t._v(" "),r("li",[r("p",[t._v("状态定义")]),t._v(" "),r("p",[t._v("dp[i][j] 表示的是子问题 str1(0…i)，str2(0…j) 的答案，和常规的字符匹配类动态规划题目一样，没什么特别")])]),t._v(" "),r("li",[r("p",[t._v("递推方程")]),t._v(" "),r("p",[t._v("问题拆解那里其实说的比较清楚了，这里需要把之前的描述写成表达式的形式：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("str1(i) == str2(j):\ndp[i][j] = dp[i - 1][j - 1]\ntip: 这里不需要考虑 dp[i - 1][j] 以及 dp[i][j - 1]，\n因为dp[i - 1][j - 1] <= dp[i - 1][j] +1 && dp[i - 1][j - 1] <= dp[i][j - 1] + 1\n\nstr1(i) != str2(j):\ndp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][i - 1]) + 1\n")])])]),r("p",[t._v("你可以看到"),r("strong",[t._v("字符之间比较的结果永远是递推的前提")])])]),t._v(" "),r("li",[r("p",[t._v("实现")]),t._v(" "),r("p",[t._v("这里有一个初始化，就是当一个字符串是空串的时候，转化只能通过添加元素或是删除元素来达成，那这里状态数组中存的值其实是和非空字符串的字符数量保持一致。")])])]),t._v(" "),r("h4",{attrs:{id:"第二种个解答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二种个解答"}},[t._v("#")]),t._v(" 第二种个解答")]),t._v(" "),r("ul",[r("li",[t._v("问题1：如果 word1[0..i-1] 到 word2[0..j-1] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要几步呢？")]),t._v(" "),r("li",[t._v("答：先使用 k 步，把 word1[0..i-1] 变换到 word2[0..j-1]，消耗 k 步。再把 word1[i] 改成 word2[j]，就行了。如果 word1[i] == word2[j]，什么也不用做，一共消耗 k 步，否则需要修改，一共消耗 k + 1 步。")]),t._v(" "),r("li",[t._v("问题2：如果 word1[0..i-1] 到 word2[0..j] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要消耗几步呢？")]),t._v(" "),r("li",[t._v("答：先经过 k 步，把 word1[0..i-1] 变换到 word2[0..j]，消耗掉 k 步，再把 word1[i] 删除，这样，word1[0..i] 就完全变成了 word2[0..j] 了。一共 k + 1 步。")]),t._v(" "),r("li",[t._v("问题3：如果 word1[0..i] 到 word2[0..j-1] 的变换需要消耗 k 步，那 word1[0..i] 到 word2[0..j] 的变换需要消耗几步呢？")]),t._v(" "),r("li",[t._v("答：先经过 k 步，把 word1[0..i] 变换成 word2[0..j-1]，消耗掉 k 步，接下来，再插入一个字符 word2[j], word1[0..i] 就完全变成了 word2[0..j] 了。")])]),t._v(" "),r("p",[t._v("从上面三个问题来看，word1[0..i] 变换成 word2[0..j] 主要有三种手段，用哪个消耗少，就用哪个。")]),t._v(" "),r("p",[t._v("执行用时 :16 ms, 在所有 cpp 提交中击败了72.64%的用户")]),t._v(" "),r("p",[t._v("内存消耗 :11.5 MB, 在所有 cpp 提交中击败了7.47%的用户")]),t._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    int minDistance(string word1, string word2) {\n    int len1 = word1.size(), len2 = word2.size();\n\tvector<vector<int>> dp(len1+1,vector<int>(len2+1));\n\tdp[0][0] = 0;\n\tfor (int i = 1; i <= len1; ++i) {\n\t\tdp[i][0] = i;\n\t}\n\n\tfor (int j = 1; j <= len2; ++j) {\n\t\tdp[0][j] = j;\n\t}\n\n\tfor (int i = 1; i <= len1; ++i) {\n\t\tfor (int j = 1; j <= len2; ++j) {\n\t\t\tif (word1[i - 1] == word2[j - 1]) {\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdp[i][j] = min(dp[i - 1][j],\n\t\t\t\t\tmin(dp[i][j - 1], dp[i - 1][j - 1])) + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dp[len1][len2];\n    }\n")])])]),r("h3",{attrs:{id:"第二版-改进一下"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二版-改进一下"}},[t._v("#")]),t._v(" 第二版，改进一下")]),t._v(" "),r("p",[t._v("执行用时 :12 ms, 在所有 cpp 提交中击败了90.55%的用户")]),t._v(" "),r("p",[t._v("内存消耗 :11.2 MB, 在所有 cpp 提交中击败了41.63%的用户")]),t._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("int minDistance(string word1, string word2) {\n\tint len1 = word1.size(), len2 = word2.size();\n\n\tvector<vector<int>> dp(len1+1,vector<int>(len2+1));\n\n\tfor (int i = 0; i <= len1; ++i) {\n\t\tfor (int j = 0; j <= len2; ++j) {\n\t\t\t\n\t\t\tif (j == 0) dp[i][0] = i; //从无到有显然要经历i步插入操作\n\t\t\telse if (i == 0) dp[0][j] = j;  //从有到无显然要经历j步删除操作\n\t\t\telse if (word1[i - 1] == word2[j - 1]) {\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdp[i][j] = min(dp[i - 1][j],\n\t\t\t\t\tmin(dp[i][j - 1], dp[i - 1][j - 1])) + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dp[len1][len2];\n\n}\n\n")])])]),r("p",{attrs:{id:"解码方法"}})])}),[],!1,null,null,null);e.default=i.exports}}]);
